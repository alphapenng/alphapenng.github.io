<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>寂寞留白</title><link>https://alphapenng.github.io/zh-cn/</link><description>Recent content on 寂寞留白</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 02 Dec 2022 21:14:34 +0800</lastBuildDate><atom:link href="https://alphapenng.github.io/zh-cn/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenWrt开启802.11k-v-r协议实现手机在路由器之间无缝漫游</title><link>https://alphapenng.github.io/zh-cn/2022/12/02/openwrt%E5%BC%80%E5%90%AF802.11k-v-r%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%9C%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E9%97%B4%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8/</link><pubDate>Fri, 02 Dec 2022 21:14:34 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/12/02/openwrt%E5%BC%80%E5%90%AF802.11k-v-r%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E5%9C%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E9%97%B4%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8/</guid><description>mesh 路由器基本概念 以一张脑图梳理一下 mesh 路由器的基本概念 ⚠️ 802.11k/v/r 这三个协议必须是路由器和设备同时支持才可以起作用 ⚠️ 设备这方面我们基本不用太担心,</description><content:encoded><![CDATA[<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_07_epB5YQ.png" alt="toc"></p>
<h2 id="mesh-路由器基本概念">mesh 路由器基本概念</h2>
<p><code>以一张脑图梳理一下 mesh 路由器的基本概念</code></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_07_OwGgb3.png" alt="mesh"></p>
<p>⚠️ <strong>802.11k/v/r 这三个协议必须是路由器和设备同时支持才可以起作用</strong> ⚠️</p>
<ul>
<li>
<p>设备这方面我们基本不用太担心,只要不是特别老的手机基本都支持</p>
</li>
<li>
<p>另一方面不是必须 802.11k/v/r 这三个协议同时支持才能达到无缝漫游的效果，事实上现在大部分的 mesh 路由器都只支持 K 和 V 这两个协议</p>
</li>
</ul>
<h2 id="openwrt-配置-80211kvr-协议实现无缝漫游">OpenWrt 配置 802.11k/v/r 协议实现无缝漫游</h2>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_IXO0rh.png" alt="进入lan口修改页面"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_ZQPakc.png" alt="修改IP地址"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_wVqsxW.png" alt="修改dhcp设置"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_zRVMPx.png" alt="修改ipv6设置"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_H0W4Lr.png" alt="保存并应用"></p>
<p>⚠️ <strong>无线参数需要在提供 wifi 接入的设备（包括主路由和每个 AP） 上都设置一次</strong> ⚠️</p>
<p>💁 <strong>由于前面的操作我们已经关闭了 AP 的 DHCP 服务，在连接主路由之前，如果需要把 AP 接到电脑上设置，要手动指定网卡的 IP 地址</strong></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_04_Gujron.png" alt="进入无线配置页面"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_oJDzOB.png" alt="选择信道及设置wifi名称"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_KjEi6o.png" alt="无缝漫游设置"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_sjgk94.png" alt="保存并应用"></p>
<p>用同样的方法可以设置其他 AP 或者主路由。</p>
<p>当我们设置好了所有的路由器以后，将路由器部署到家里指定位置，然后测试一下信号。</p>
<p>安卓手机可以下载一款叫做 <code>wifi分析仪</code> 的应用，<a href="https://github.com/VREMSoftwareDevelopment/WiFiAnalyzer/releases">下载链接</a>，打开后查看 wifi 详情</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_uidQgU.png" alt="wifi分析仪"></p>
<p>接着去各大应用市场下载一款叫做“WiFi 魔盒”的应用，打开后进行如下操作进入漫游测试页面</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_ygx8pm.png" alt="wifi魔盒"></p>
<p>将手机从一个路由器（AP）处慢慢移动至另一个路由器（AP）处，并再次返回，测试漫游切换功能。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_8dtuXU.png" alt="测试漫游"></p>
<p>可以看到，漫游都是成功切换的，时间一次是 45ms，一次是 25ms，对于手机看视频等的日常应用是完全能够满足需要的，可以做到无感的，只是不要在手机玩游戏的时候频繁在房间里移动，在切换的时候还是会发生掉线。</p>
<h2 id="总结">总结</h2>
<ol>
<li>
<p>OpenWrt 系统 802.11k/v/r 漫游可以整合不同品牌路由器组成一个无缝漫游的网络</p>
</li>
<li>
<p>可分别设置 2.4G 和 5G 是否漫游</p>
</li>
<li>
<p>可根据使用需求单独设置信道，发射功率等参数，保证了组网的灵活性</p>
</li>
</ol>
]]></content:encoded></item><item><title>EPON 上行 E8 C 家庭网关（烽火 HG220GS） telecomadmin 密码获取及桥接设置</title><link>https://alphapenng.github.io/zh-cn/2022/11/21/epon-%E4%B8%8A%E8%A1%8C-e8-c-%E5%AE%B6%E5%BA%AD%E7%BD%91%E5%85%B3%E7%83%BD%E7%81%AB-hg220gs-telecomadmin-%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96%E5%8F%8A%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</link><pubDate>Mon, 21 Nov 2022 21:04:54 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/11/21/epon-%E4%B8%8A%E8%A1%8C-e8-c-%E5%AE%B6%E5%BA%AD%E7%BD%91%E5%85%B3%E7%83%BD%E7%81%AB-hg220gs-telecomadmin-%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96%E5%8F%8A%E6%A1%A5%E6%8E%A5%E8%AE%BE%E7%BD%AE/</guid><description>获取 telecomadmin 账户密码 以默认配置账号密码登录光猫后台管理页面 这里以默认配置地址为例，登录 http://192.168.1.1，输入默认配置账号密码，</description><content:encoded><![CDATA[<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_07_0SVVIk.png" alt="toc"></p>
<h2 id="获取-telecomadmin-账户密码">获取 <code>telecomadmin</code> 账户密码</h2>
<ol>
<li>
<p>以默认配置账号密码登录光猫后台管理页面</p>
<p>这里以默认配置地址为例，登录 <a href="http://192.168.1.1">http://192.168.1.1</a>，输入默认配置账号密码，点击确认。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_22_xQEAjw.png" alt="默认配置账号密码登录"></p>
</li>
<li>
<p>访问 <a href="http://192.168.1.1/logoffaccount.html">http://192.168.1.1/logoffaccount.html</a> 页面，将隐藏账号<code>启用</code>，保存退出。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_22_segES4.png" alt="启用隐藏账号"></p>
</li>
<li>
<p>访问 <a href="http://192.168.1.1">http://192.168.1.1</a> ，输入隐藏账号密码登陆</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">账号：fiberhomehg2x0
</span></span><span class="line"><span class="cl">密码：hg2x0
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_22_16mIRi.png" alt="隐藏账号密码登录"></p>
</li>
<li>
<p>打开 <a href="http://192.168.1.1/backupsettings.html">http://192.168.1.1/backupsettings.html</a> 备份配置文件 <code>backupsettings.conf</code></p>
<p>⚠️ <code>请注意文件大小应该在 45KB 左右</code>。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_22_iGVxIG.png" alt="备份配置文件"></p>
</li>
<li>
<p>解密 telecomadmin 账号密码</p>
<p>用记事本打开刚才下载的配置文件 <code>backupsettings.conf</code>，定位 &lt;X_CT-COM_TeleComAccount&gt; 字段，会发现 password，这是用 base64 加密的，使用 <a href="https://base64.us">base64 解密工具</a> 可以解开，即得到密码。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_bJhg9S.png" alt="用 base64 加密的 password 密码"></p>
</li>
</ol>
<h2 id="将光猫设置为桥接模式">将光猫设置为桥接模式</h2>
<ol>
<li>
<p>以 <code>telecomadmin</code> 账号和密码登录光猫后台管理界面</p>
</li>
<li>
<p>将 <code>tr069</code> 协议禁用，关闭中间件
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_zUMe7Q.png" alt="禁用 tr069"></p>
<p>⚠️ 若“保存/应用”按钮无法点击，请使用网页开发者工具移除按钮的 <code>disalbed</code> 属性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 移除命令
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">$0</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_Fkc9DZ.png" alt="打开开发者工具"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_E7odDi.png" alt="移除保存按钮 disabled 属性">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_pjB4Jw.png" alt="再次点击保存">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_dOB9Pt.png" alt="重启路由器"></p>
</li>
<li>
<p>更改桥接模式</p>
<p>在“宽带设置”标签页里，会看到三个连接名称，第一个是 <code>tr69</code>，第二个是 <code>iptv</code>，第三个是 <code>internet</code>（上网连接）。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_4msLtz.png" alt="更改桥接模式"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_bkxtRv.png" alt="填入mtu值并保存"></p>
<p>若忘记拨号上网的密码可以打开开发者工具查看</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_11_23_s1o2Vy.png" alt="查看拨号上网密码"></p>
<p>更改完后，点击“保存/应用”按钮，重启路由器。</p>
</li>
<li>
<p>关闭光猫 dhcp 服务(可选，如果影响路由器可以选择关闭)</p>
<p>⚠️ <strong>关闭之前请先截屏备份，日后需要开启时再恢复设置</strong> ⚠️</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_07_1ZUI1B.png" alt="截屏备份dhcp服务"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_6eFkIc.png" alt="关闭光猫dhcp服务"></p>
</li>
<li>
<p>关闭光猫 wifi 服务</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_YNDRB5.png" alt="关闭光猫wifi服务"></p>
</li>
</ol>
<h2 id="主路由openwrt设置拨号上网">主路由（Openwrt）设置拨号上网</h2>
<ol>
<li>
<p>设置 WAN 口拨号上网</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_O1bdHs.png" alt="修改WAN口协议"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_OTHsz9.png" alt="填入拨号上网用户名密码"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_enQDFH.png" alt="保存并应用"></p>
</li>
<li>
<p>添加虚拟接口以访问光猫后台</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_rKXF90.png" alt="创建虚拟接口"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_zGQKdf.png" alt="接口常规设置"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_bKdr40.png" alt="取消默认网关"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_XsdeG7.png" alt="修改防火墙设置"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_12_05_ahHfTC.png" alt="保存并应用"></p>
</li>
</ol>
]]></content:encoded></item><item><title>Tailscale 异地组网实践：Headscale 的部署方法和使用</title><link>https://alphapenng.github.io/zh-cn/2022/10/10/tailscale-%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91%E5%AE%9E%E8%B7%B5headscale-%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 10 Oct 2022 22:56:20 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/10/10/tailscale-%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91%E5%AE%9E%E8%B7%B5headscale-%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>此篇文章是参考了 👨‍💻云原生实验室关于WireGuard 的Tailscale 基础教程：Headscale 的部署方法和使用教程，再根据自己的异</description><content:encoded><![CDATA[<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226163600_ha9Q2A.png" alt="toc"></p>
<p>此篇文章是参考了 👨‍💻<a href="https://icloudnative.io/">云原生实验室</a>关于<code>WireGuard</code> 的<a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale">Tailscale 基础教程：Headscale 的部署方法和使用教程</a>，再根据自己的异地组网需求，在搭建自己的家庭网络后总结记录而成，也给喜欢折腾并且有同样需求的朋友提供一个参考。</p>
<h2 id="前言">前言</h2>
<p>为了满足在任何地点都能访问家庭网络，并且要求网络稳定，带宽和延时在合理的范围内，在斟酌众多内网穿透技术后，觉得还是通过 VPN 协议来组建大内网比较靠谱。至于该选择哪种 VPN， 在比较了各种 VPN 协议之间的优劣后，最终决定使用 WireGuard 协议来组建。</p>
<h2 id="为什么选择-wireguard">为什么选择 WireGuard</h2>
<p>WireGuard 相比于传统 VPN 的核心优势是没有 VPN 网关，所有节点之间都可以点对点（P2P）连接，通过 WireGuard 既可以搭建依靠中继服务器为中心的星型网络结构，也可以通过所有节点的点对点连接组建全互联模式（full mesh）。这里就不展开具体细节，想深入的话可以参考这篇文章<a href="https://icloudnative.io/posts/wireguard-full-mesh/#1-%e5%85%a8%e4%ba%92%e8%81%94%e6%a8%a1%e5%bc%8f%e6%9e%b6%e6%9e%84%e4%b8%8e%e9%85%8d%e7%bd%ae">Wireguard 全互联模式（full mesh）配置指南</a>。</p>
<p>WireGuard 本身只是一个内核级别的模块，只是一个数据平面，至于上层的更高级的功能（比如秘钥交换机制，UDP 打洞，ACL 等），需要通过用户空间的应用来实现。</p>
<p>下面就轮到 Tailscale 登场了。</p>
<h2 id="tailscale-是什么">Tailscale 是什么</h2>
<p>Tailscale 是一种基于 WireGuard 的虚拟组网工具，是在用户态实现了 WireGuard 协议，它在功能和易用性上绝对是完爆其他工具：</p>
<ol>
<li>开箱即用
<ul>
<li>无需配置防火墙</li>
<li>没有额外的配置</li>
</ul>
</li>
<li>高安全性 / 私密性
<ul>
<li>自动密钥轮换</li>
<li>点对点连接</li>
<li>支持用户审查端到端的访问记录</li>
</ul>
</li>
<li>在原有的 ICE、STUN 等 UDP 协议外，实现了 DERP TCP 协议来实现 NAT 穿透</li>
<li>基于公网的控制服务器下发 ACL 和配置，实现节点动态更新</li>
<li>通过第三方（如 Google） SSO 服务生成用户和私钥，实现身份认证</li>
</ol>
<p>简而言之，我们可以将 Tailscale 看成是更为易用、功能更完善的 WireGuard。</p>
<h2 id="headscale-是什么">Headscale 是什么</h2>
<p>Tailscale 的控制服务器是不开源的，而且对免费用户有诸多限制。好在目前有一款开源的实现叫 <a href="https://github.com/juanfont/headscale">Headscale</a>，这也是唯一的一款，希望能发展壮大。</p>
<p>Headscale 由欧洲航天局的 Juan Font 使用 Go 语言开发，在 BSD 许可下发布，实现了 Tailscale 控制服务器的所有主要功能，可以部署在企业内部，没有任何设备数量的限制，且所有的网络流量都由自己控制。</p>
<p>目前 Headscale 还没有可视化界面，期待后续更新吧。</p>
<h2 id="headscale-部署">Headscale 部署</h2>
<p>Headscale 部署很简单，推荐直接在 Linux 主机上安装。</p>
<blockquote>
<p>💁 理论上来说只要你的 Headscale 服务可以暴露到公网出口就行，但最好不要有 NAT，所以推荐将 Headscale 部署在有公网 IP 的云主机上。</p>
</blockquote>
<p>首先需要到其 GitHub 仓库的 Release 页面下载最新版的二进制文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --output-document<span class="o">=</span>/usr/local/bin/headscale <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   https://github.com/juanfont/headscale/releases/download/v&lt;HEADSCALE VERSION&gt;/headscale_&lt;HEADSCALE VERSION&gt;_linux_&lt;ARCH&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod +x /usr/local/bin/headscale
</span></span></code></pre></div><p>创建配置目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /etc/headscale
</span></span></code></pre></div><p>创建目录用来存储数据与证书：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /var/lib/headscale
</span></span></code></pre></div><p>创建空的 SQLite 数据库文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">touch /var/lib/headscale/db.sqlite
</span></span></code></pre></div><p>创建 Headscale 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/juanfont/headscale/raw/main/config-example.yaml -O /etc/headscale/config.yaml
</span></span></code></pre></div><ul>
<li>修改配置文件，将 <code>server_url</code> 改为公网 IP 或域名。💁 <strong>如果是国内服务器，域名必须要备案。</strong> 没有域名就直接用公网 IP 。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225214651_Xnip2022-12-25_16-35-00.jpg" alt="server_url"></li>
<li>修改监听地址，在所有 ip 上监听
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225214825_Xnip2022-12-25_16-35-09.jpg" alt="listen_addr"></li>
<li>修改 grpc 监听地址，在所有 ip 上监听
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225215212_Xnip2022-12-25_21-30-45.jpg" alt="grpc_listen_addr"></li>
<li>修改 private_key 存储路径
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225215346_Xnip2022-12-25_21-30-56.jpg" alt="private_key_path"></li>
<li>修改 noise_private_key 存储路径
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225215500_Xnip2022-12-25_21-31-16.jpg" alt="noise_private_key"></li>
<li>可自定义私有网段，也可同时开启 IPv4 和 IPv6
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225215830_Xnip2022-12-25_21-31-32.jpg" alt="ip_prefixes"></li>
<li>修改数据库存储路径
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225220137_Xnip2022-12-25_21-32-06.jpg" alt="db_path"></li>
<li>如果暂时用不到 DNS 功能，可以先将 <code>magic_dns</code> 设为 false
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225220319_Xnip2022-12-25_21-32-22.jpg" alt="magic_dns"></li>
<li>修改 <code>unix_socket</code>的路径
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225220427_Xnip2022-12-25_21-32-29.jpg" alt="unix_socket"></li>
</ul>
<p>创建 SystemD service 配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># /etc/systemd/system/headscale.service</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>headscale controller
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>syslog.target
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="nv">User</span><span class="o">=</span>headscale
</span></span><span class="line"><span class="cl"><span class="nv">Group</span><span class="o">=</span>headscale
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/local/bin/headscale serve
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>always
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Optional security enhancements</span>
</span></span><span class="line"><span class="cl"><span class="nv">NoNewPrivileges</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">PrivateTmp</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">ProtectSystem</span><span class="o">=</span>strict
</span></span><span class="line"><span class="cl"><span class="nv">ProtectHome</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">ReadWritePaths</span><span class="o">=</span>/var/lib/headscale /var/run/headscale
</span></span><span class="line"><span class="cl"><span class="nv">AmbientCapabilities</span><span class="o">=</span>CAP_NET_BIND_SERVICE
</span></span><span class="line"><span class="cl"><span class="nv">RuntimeDirectory</span><span class="o">=</span>headscale
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><p>创建 headscale 用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">useradd headscale -d /home/headscale -m
</span></span></code></pre></div><p>修改 /var/lib/headscale 目录的 owner：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chown -R headscale:headscale /var/lib/headscale
</span></span></code></pre></div><p>Reload SystemD 以加载新的配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl daemon-reload
</span></span></code></pre></div><p>启动 Headscale 服务并设置开机自启：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl <span class="nb">enable</span> --now headscale
</span></span></code></pre></div><p>查看运行状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl status headscale
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225221236_g71Quo.png" alt="headscale_status"></p>
<p>查看占用端口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -tulnp<span class="p">|</span>grep headscale
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225221452_b2Ve6p.png" alt="headscale_port"></p>
<p>Tailscale 中有一个概念叫 tailnet，你可以理解成租户，租户与租户之间是相互隔离的，详情见 Tailscale 的官方文档： <a href="https://tailscale.com/kb/1136/tailnet/">What is a tailnet</a>。Headscale 也有类似的实现叫 namespace，即命名空间。我们需要先创建一个 namespace，以便后续客户端接入，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale namespaces create default
</span></span></code></pre></div><p>查看命名空间：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale namespaces list
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225222030_3ZXzRp.png" alt="headscale_namespace"></p>
<h2 id="tailscale-客户端接入">Tailscale 客户端接入</h2>
<h3 id="macos">macOS</h3>
<p>macOS 有 3 种安装方法：</p>
<ol>
<li>直接通过应用商店安装，地址： <a href="https://apps.apple.com/ca/app/tailscale/id1475387142">https://apps.apple.com/ca/app/tailscale/id1475387142</a>。前提是你需要一个美区 ID。</li>
<li>下载<a href="https://pkgs.tailscale.com/stable/#macos">安装包</a>直接安装，绕过应用商店。</li>
<li>安装开源的命令行工具 <code>tailscale</code> 和 <code>tailscaled</code>。相关链接： <a href="https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS">https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS</a>。</li>
</ol>
<p>这三种安装包的核心数据包处理代码是相同的，唯一的区别在于在于打包方式以及与系统的交互方式。</p>
<p>这里我直接通过第 2 种方式下载安装包进行安装。安装完应用后还需要做一些操作，才能让 Tailscale 使用 Headscale 作为控制服务器。当然，Headscale 已经给我们提供了详细的操作步骤，你只需要在浏览器中打开 URL：<code>http://&lt;HEADSCALE_PUB_IP&gt;:8080/apple</code>，其中<code>&lt;HEADSCALE_PUB_IP&gt;</code>就是你部署 Headscale 的公网 ip，便会出现如下的界面：</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225224403_E9Y7VH.png" alt="Img"></p>
<p>修改完成后重启 Tailscale 客户端，在 macOS 顶部状态栏中找到 Tailscale 并点击，然后再点击 <code>Log in</code>。</p>
<p>然后立马就会跳转到浏览器并打开一个页面。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225230100_Xnip2022-12-25_23-00-48.jpg" alt="machine_registration"></p>
<p>将红色框内的命令复制粘贴到 headscale 所在机器的终端中，并将 NAMESPACE 替换为前面所创建的 namespace。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale -n default nodes register --key nodekey:xxxxxx
</span></span></code></pre></div><p>注册成功，查看注册的节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale nodes list
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225231053_SOSmsv.png" alt="nodes_list"></p>
<p>回到 macOS，测试是否能 ping 通对端节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ping 10.1.0.2
</span></span></code></pre></div><p>也可以使用 Tailscale CLI 来测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/Applications/Tailscale.app/Contents/MacOS/Tailscale ping 10.1.0.2
</span></span></code></pre></div><h3 id="openwrt">OpenWrt</h3>
<p>OpenWrt 安装方法参考 <a href="https://github.com/adyanth/openwrt-tailscale-enabler">https://github.com/adyanth/openwrt-tailscale-enabler</a></p>
<ol>
<li>
<p>下载安装包 <a href="https://github.com/adyanth/openwrt-tailscale-enabler/releases"><code>openwrt-tailscale-enabler-&lt;tag&gt;.tgz</code></a></p>
</li>
<li>
<p>通过 scp 命令将安装包拷贝至 openwrt 的 <code>/tmp</code> 目录下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp -O openwrt-tailscale-enabler-v1.34.1-f5576b5-autoupdate.tgz root@&lt;openwrt_ip&gt;:/tmp
</span></span></code></pre></div></li>
<li>
<p>解压安装包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar x -zvC / -f openwrt-tailscale-enabler-&lt;tag&gt;.tgz
</span></span></code></pre></div></li>
<li>
<p>预安装软件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">opkg update
</span></span><span class="line"><span class="cl">opkg install libustream-openssl ca-bundle kmod-tun
</span></span></code></pre></div></li>
<li>
<p>运行 tailscale 初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/etc/init.d/tailscale start
</span></span><span class="line"><span class="cl">tailscale up --login-server<span class="o">=</span>&lt;headscale_ip&gt;:8080 --accept-routes<span class="o">=</span><span class="nb">true</span> --accept-dns<span class="o">=</span><span class="nb">false</span>
</span></span></code></pre></div></li>
<li>
<p>复制生成的 URL，并在浏览器中打开</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226073524_3iszn6.png" alt="register_url"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225230100_Xnip2022-12-25_23-00-48.jpg" alt="machine_registration"></p>
</li>
<li>
<p>将红色框内的命令复制粘贴到 headscale 所在机器的终端中，并将 NAMESPACE 替换为前面所创建的 namespace。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale -n default nodes register --key nodekey:xxxxxx
</span></span></code></pre></div><p>注册成功，查看注册的节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale nodes list
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221225231053_SOSmsv.png" alt="nodes_list"></p>
<p>回到 openwrt，可以看到 Tailscale 会自动创建相关的路由表和 iptables 规则。路由表可通过以下命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route show table <span class="m">52</span>
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226081250_FLxN5g.png" alt="route_table"></p>
<p>查看 iptables 规则：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iptables -S
</span></span></code></pre></div><p>测试是否能 ping 通对端节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ping 10.1.0.1
</span></span></code></pre></div><p>也可以使用 tailscale cli 来测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tailscale ping 10.1.0.1
</span></span></code></pre></div></li>
<li>
<p>设置 tailscale 开机自启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/etc/init.d/tailscale <span class="nb">enable</span>
</span></span></code></pre></div><p>查看是否设置成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /etc/rc.d/S*tailscale*
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226084534_1PGL1X.png" alt="tailscale_boot"></p>
</li>
<li>
<p>以后升级 tailscale，只需从<a href="https://pkgs.tailscale.com/stable/#static">这里</a>下载最新的安装包，下载的包名是类似 <code>1.2.10_mips</code> 这种结构，然后替换掉 <code>/usr/bin/tailscale</code> 和 <code>/usr/bin/tailscaled</code> 相同路径下的二进制文件。</p>
</li>
</ol>
<h2 id="打通局域网">打通局域网</h2>
<p>到目前为止我们只是打造了一个点对点的 Mesh 网络，各个节点之间都可以通过 WireGuard 的私有网络 IP 进行直连。我们还可以通过适当的配置让每个节点都能访问其他节点的局域网 IP。这个使用场景就比较多了，你可以直接访问家庭内网的 NAS，或者内网的任何一个服务，更高级的玩家可以使用这个方法来访问云上 Kubernetes 集群的 Pod IP 和 Service IP。</p>
<p>我们以安装了 tailscale 客户端的 OpenWrt 为例，我们希望其他 tailscale 客户端可以直接通过 OpenWrt 路由器的局域网 IP（例如 10.0.1.0/24） 访问 OpenWrt 内网的任何一台设备。</p>
<ol>
<li>
<p>配置方法很简单，首先需要设置 IPv4 与 IPv6 路由转发：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;net.ipv4.ip_forward = 1&#39;</span> <span class="p">|</span> tee /etc/sysctl.d/ipforwarding.conf
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;net.ipv6.conf.all.forwarding = 1&#39;</span> <span class="p">|</span> tee -a /etc/sysctl.d/ipforwarding.conf
</span></span><span class="line"><span class="cl">sysctl -p /etc/sysctl.d/ipforwarding.conf
</span></span></code></pre></div></li>
<li>
<p>客户端修改注册节点的命令，在原来命令的基础上加上参数 &ndash;advertise-routes=10.0.1.0/24，告诉 Headscale 服务器 “我这个节点可以转发这些地址的路由”。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tailscale up --login-server<span class="o">=</span>http://&lt;HEADSCALE_PUB_IP&gt;:8080 --accept-routes<span class="o">=</span><span class="nb">true</span> --accept-dns<span class="o">=</span><span class="nb">false</span> --advertise-routes<span class="o">=</span>10.0.1.0/24 --reset
</span></span></code></pre></div></li>
<li>
<p>在 Headscale 端查看路由，可以看到相关路由是关闭的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale nodes list
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226142834_C68va1.png" alt="node_id"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看 id 为 2 的节点的路由，也就是 openwrt 的路由</span>
</span></span><span class="line"><span class="cl">headscale routes list -i <span class="m">2</span>
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/20221226155628_P9rA66.png" alt="route_list"></p>
<p>开启路由：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">headscale routes <span class="nb">enable</span>  -r <span class="m">1</span>
</span></span></code></pre></div><p>其他 tailscale 节点查看路由结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route show table 52<span class="p">|</span>grep <span class="s2">&#34;10.0.1.0/24&#34;</span>
</span></span></code></pre></div></li>
</ol>
<p>其他节点启动时需要增加 <code>--accept-routes=true</code> 选项来声明 “我接受外部其他节点发布的路由”。</p>
<p>现在你在任何一个 tailscale 客户端所在的节点都可以 ping 通 openwrt 路由器所在内网的机器了。</p>
]]></content:encoded></item><item><title>红米 AX6 解锁 SSH 安装 ShellClash 及刷机 Openwrt 教程</title><link>https://alphapenng.github.io/zh-cn/2022/10/06/%E7%BA%A2%E7%B1%B3-ax6-%E8%A7%A3%E9%94%81-ssh-%E5%88%B7%E6%9C%BA-openwrt-%E6%95%99%E7%A8%8B/</link><pubDate>Thu, 06 Oct 2022 08:13:14 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/10/06/%E7%BA%A2%E7%B1%B3-ax6-%E8%A7%A3%E9%94%81-ssh-%E5%88%B7%E6%9C%BA-openwrt-%E6%95%99%E7%A8%8B/</guid><description>红米 AX6 和小米 AX3600 配置基本相同，只是缺少一根智能家居的天线，性价比高的离谱，刷机做软路由转发流量毫无压力，为了在有限的预算内提升家庭网络的体验，</description><content:encoded><![CDATA[<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_09_mindmap-1665311313490.png" alt="toc"></p>
<p>红米 AX6 和小米 AX3600 配置基本相同，只是缺少一根智能家居的天线，性价比高的离谱，刷机做软路由转发流量毫无压力，为了在有限的预算内提升家庭网络的体验，前段时间在闲鱼 300 掏了一台红米 AX6，趁着假期跟着别人的教程折腾了一遍所有的刷机方法，也踩了不少坑，记录下来给自己也给别人有个参考，折腾了一遍之后，本人还是采用了直接安装 ShellClash 的方案，目前也就代理流量一个需求，考虑未来可能会根据需求再刷 openwrt。小米路由器目前解锁刷机的方案都已经比较模式了，网上的教程也很多，把它作为家中的主路由刷机再跑软路由是不错的，能够和 AX1800 组 mesh，覆盖和性能都不是问题。</p>
<blockquote>
<p>本教程是根据 👨‍🎨<a href="https://b23.tv/OwpIJ7j">卡卡的捣鼓日记</a> 1️⃣ <a href="https://b23.tv/d1HIfhW">红米 AX6 Openwrt 刷机教程（解锁步骤 AX6000、AX9000 通用）-哔哩哔哩</a> 2️⃣ <a href="https://b23.tv/iDfgYTq">玩透红米 AX6 OPENWRT 扩容刷机及 Uboot 刷机-哔哩哔哩</a> 👨‍💻 <a href="https://qust.me">酱紫表</a> 3️⃣ <a href="https://qust.me/post/hong-mi-ax6-jie-suo-ssh-an-zhuang-shi-yong-shellclash-jiao-cheng/">红米 AX6 解锁 SSH 安装使用 ShellClash 教程</a>学习记录而成</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>红米 AX6 刷 Openwrt 一直有一个十分头疼的问题，由于解锁 SSH 权限是基于 WIFI 中继来实现的，需要使用一台具备无线功能的 OP 路由器作为小米路由器的扩展 WIFI，这意味着刷机前先要准备一台已经刷好 OP 系统的无线路由器。这个要求恐怕会劝退不少人！其实我们可以通过其他方式来变相实现这个需求。今天就给大家介绍一种新方法，仅需一台笔记本电脑或是具备无线网卡的台式机就可以完成刷机工作。</p>
<h2 id="刷机类型">刷机类型</h2>
<p>小米 AX 系列路由器刷机类型主要分为两类：<code>不扩容刷机</code>和<code>扩容刷机</code>。</p>
<p>刷个机为什么还要扩容呢？
<strong>这是因为小米 AX 系列路由器分区机制所导致的。</strong></p>
<p>我们以闪存大小为 128 兆红米 AX6 为例进行讲解，128 兆空间被分为多个分区，其中 <code>mtd12</code> 和 <code>mtd13</code> 这两个分区存储路由器的固件，对应分区名为 <code>root_fs</code> 和 <code>root_fs1</code>。不管是小米官方固件还是 OP 固件都只能刷入这两个分区。为什么会有两个分区存放固件呢？这应该是一种安全备份机制，类似于我们主板的双 BIOS。比如原固件在 mtd12 分区，当我们更新固件时，会更新到 mtd13 分区，更新完毕路由器重启后会读取 mtd13 分区的系统文件，以此类推每次更新都会刷入到另一个分区里。极大提高了更新固件的安全性。</p>
<p>凡事都有两面性，双分区可以提高了安全性，但每个分区的容量就变小了，两个分区均只有 <code>36</code> 兆大小，而刷入的固件大小更是要控制在 <code>30</code> 兆以内。<code>30</code> 兆对于小米官方固件来说够用了，但对于 OP 系统而言有些捉襟见肘。如果插件不多勉强够用；如果插件较多则无法满足需求。这时候我们就要对分区进行扩容操作，所以就有了扩容刷机。到此为止大家应该对两种刷机类型有所了解，那他们各自有什么优缺点呢？</p>
<p><strong>不扩容刷机优点：</strong></p>
<ol>
<li>刷机简单省去了扩容的操作步骤。</li>
<li>可实现双系统，由于刷入的 OP 固件大小在 30 兆以内，我们可以把一个分区刷入 OP 固件，一个分区保留官方固件，通过手动设置轻松进行系统切换。</li>
<li>不扩容刷机没有改变分区表，刷机出现问题我们可以使用小米官方修复工具进行修复。</li>
</ol>
<p><strong>不扩容刷机缺点：</strong></p>
<ol>
<li>刷入 OP 固件必须控制在 <code>30</code> 兆以内，无法安装太多插件可玩性一般。</li>
</ol>
<p><strong>扩容刷机优点：</strong></p>
<ol>
<li>对固件的容量限制小，可玩性更高。</li>
<li>还可以通过刷入 Uboot 更安全快捷进行刷机。</li>
</ol>
<p><strong>扩容刷机缺点：</strong></p>
<ol>
<li>就是刷机步骤复杂一些，用回官方固件或实现双系统需要重新刷机，</li>
<li>无法使用官方修复工具恢复。</li>
</ol>
<h2 id="准备工作">准备工作</h2>
<p>刷机需要准备的软硬件：</p>
<ul>
<li>硬件方面：
<ul>
<li>需要准备笔记本电脑或带有无线网卡的台式机一台</li>
<li>网线一根用于连接路由器和电脑</li>
</ul>
</li>
<li>软件方面：
分软件和固件两部分介绍
<ul>
<li>软件部分
<ul>
<li>虚拟机软件 virtualbox</li>
<li>文件传输工具 winscp</li>
<li>远程登录工具使用系统自带的 CMD</li>
</ul>
</li>
<li>固件部分
<ul>
<li>解锁 SSH 用到的官方固件</li>
<li>要刷入的 OP 固件</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>上面提到的所有软件、部分固件以及刷机文档的<a href="https://pan.baidu.com/s/168UqNdURVfcmsewKY4swmg">下载链接</a>，提取码：02ba。</p>
<p>为保证刷机安全，在进行操作前，请务必使用网线将电脑与路由器相连。</p>
<h2 id="解锁-ssh">解锁 SSH</h2>
<p>解锁 SSH 需要三步：</p>
<ol>
<li>降级固件</li>
<li>通过虚拟机实现一台 OP 系统的无线路由器</li>
<li>解锁 SSH</li>
</ol>
<h3 id="1-降级固件">1 降级固件</h3>
<p>AX6 可解锁 SSH 的固件版本为 <code>1.0.16</code>或<code>1.0.18</code>。我们以<code>1.0.18</code>为例。降级固件操作步骤很简单，登录 AX6 的后台，点击右上角的<code>系统状态</code>，点击<code>系统升级</code>，<code>选择固件</code>，系统建议选择<code>清除当前所有用户配置</code>，点击确定即可刷新固件，⚠️ 重启后初始化设置请务必取消勾选路由空闲时为您自动升级固件版本 ⚠️，除非你进行了 <code>SSH 固化</code>操作，具体操作见<a href="#5-%E5%9B%BA%E5%8C%96-ssh-%E5%8F%AF%E9%80%89">后文介绍</a>。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_hGCnSV.png" alt="登录 AX6 后台">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_h6hwUP.png" alt="点击系统状态">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_vy8KGX.png" alt="点击手动升级">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_y2nym9.png" alt="点击选择文件">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_RVAMyF.png" alt="选择固件">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_05_LfZooC.png" alt="勾选清除当前所有用户配置">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_Qvsxo4.png" alt="取消勾选路由空闲时自动升级"></p>
<h3 id="2-通过虚拟机实现一台-op-系统的无线路由器">2 通过虚拟机实现一台 OP 系统的无线路由器</h3>
<p>小米 AX 系列路由器解锁 SSH 需要一台具有无线功能的 OP 路由器配合，下面我们通过虚拟机安装 OP 系统配合笔记本的无线网卡来模拟一台带无线功能的 OP 路由器。使用的虚拟机软件为 VirtualBox。安装过程全部默认设置即可，安装完成后打开虚拟机软件。点击新建，在名称处填写虚拟机的名称，可以选择虚拟机使用的目录，类型选择<code>Linux</code>，版本选择<code>Other Linux（64bit）</code>，点击下一步，内存大小默认即可，虚拟硬盘选择“使用已有的虚拟硬盘文件”，点击右侧的文件夹图标，选择提供的镜像文件，点击创建。到此为止 OP 系统的虚拟机就已经创建完毕了。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_JAfbcB.png" alt="新建虚拟机1️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_5dSV8Z.png" alt="新建虚拟机2️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_PI0CmV.png" alt="新建虚拟机3️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_PtMELx.png" alt="新建虚拟机4️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_Z8H45p.png" alt="新建虚拟机5️⃣"></p>
<p>下面进行一下网络设置，让其能够正常访问。点击<code>设置</code>，选择<code>网络</code>，在网卡 1 选项卡的连接方式中，选择<code>“仅主机网络”</code>，界面名称会自动选择安装 virtualbox 时创建的虚拟网卡。确保<code>“启用网络连接”</code>为选中状态后点击 OK。我们启动虚拟机，OP 系统默认登录 IP 地址为<code>192.168.5.1</code>，所以我们要到 windows 网络设置中将 virtualbox 虚拟网卡的 ip 地址设置为同网段地址。输入 <code>192.168.5.2</code>，子网掩码为 <code>255.255.255.0</code>。等待系统启动完毕后，就可通过 ip 地址访问 OP 啦！我们打开浏览器输入 <code>192.168.5.1</code>，用户名 <code>root</code>，密码默认为 <code>password</code>。OK！正常登录！到此为止我们制作好了一台 OP 系统的有线路由器。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_1BpVrm.png" alt="网络设置1️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_X9Ph7D.png" alt="网络设置2️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_OPfgK6.png" alt="网络设置3️⃣"></p>
<p>下面我们要对它进行一些初始化工作，设置内容很简单，就是更改 ip 地址，设置 AP 模式等相关操作。不用我们亲自设置，执行一个文件即可。
我们需要使用 <code>winscp</code> 将文件上传到 OP 路由器中。将软件进行默认设置安装后，打开软件会弹出登录界面，文件协议选择 <code>SCP</code>，主机名输入虚拟机的地址 <code>192.168.5.1</code>，用户名 <code>root</code>、密码 <code>password</code>，点击登录。弹出警告点击<code>是</code>即可打开主界面，整个界面的右半部分是 OP 的文件系统；左半部分的是我们电脑的文件系统，我们把 <code>wireless.sh</code> 文件上传到 <code>root</code> 目录下。然后在 windows 搜索栏中输入 <code>CMD</code>，打开 <code>CMD</code>。输入下面这行命令 <code>ssh root@192.168.5.1</code> 通过 SSH 登录 OP。如果弹出这个警告，我们按照提示删除警告中 <code>.ssh</code> 文件夹后重新登录，输入<code>“yes”</code>，再输入 OP 登录默认密码 <code>password</code>，即可登录 OP 的 SSH 后台。输入下面这行命令 <code>sh /root/wireless.sh</code> 点击回车，会弹出注意事项，再次点击回车即可。初始化设置完毕后，会弹出 <code>restart network</code>，重启网卡的提示，上面有一个<a href="http://192.168.31.1/cgi-bin/luci/;stok=%3CSTOK%3E/api/xqsystem/extendwifi_connect_inited_router?ssid=MEDIATEK-ARM-IS-GREAT&amp;password=ARE-YOU-OK&amp;admin_username=root&amp;admin_password=admin&amp;admin_nonce=xxx">链接</a>，我们把它复制下来后面会用到。到此为止 OP 路由器初始化设置也完成了。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_WrDNZT.png" alt="初始化工作1️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_bgAGQh.png" alt="初始化工作2️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_ageqvi.png" alt="初始化工作3️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_xAKZEi.png" alt="初始化工作4️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_a3DZVY.png" alt="初始化工作5️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_q95gyU.png" alt="初始化工作6️⃣"></p>
<p>下面我们要给他装上无线网卡，让它变成一台具有无线功能的 OP 路由器，我们需要利用 windows 的移动热点来实现。开启移动热点有个前提条件，确保电脑可访问 internet。我们先使用 wifi 连接家里可正常用网的路由器，之后在搜索栏中输入移动热点，打开设置界面，开启移动热点后点击编辑按钮，设置移动热点的 <code>ssid</code> 和<code>密码</code>，网络频段选择 <code>2.4G</code>。注意关闭<code>节能选项</code>，避免发生无连接设备时热点自动关闭的情况。由于移动热点要以<code>桥接的方式</code>连接到 OP 路由器，所以需要关闭移动热点的 <code>DHCP</code> 功能。在网络设置中<code>找到移动热点的连接双击打开</code>，<code>点击属性</code>，<code>关闭 internet 协议版本 4</code>，<code>点击确定</code>！到此为止，移动热点的设置工作就完成了。下面我们将其接入 OP 系统中。先<code>关闭虚拟机</code>，<code>点击设置</code>，<code>选择网络</code>，在网卡 1 的选项卡中将连接方式改为<code>桥接网卡</code>，<code>界面名称选择这个 Microsoft 开头的选项</code>，这就是我们建立的移动热点。<code>点击 OK</code>！<code>启动 OP</code>！到此为止一台带有无线功能的 OP 路由器就设置完毕了！
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_9HuXxK.png" alt="无线功能1️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_2a9ffs.png" alt="无线功能2️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_HpzXOy.png" alt="无线功能3️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_xZiPLG.png" alt="无线功能4️⃣"></p>
<h3 id="3-解锁-ssh">3 解锁 SSH</h3>
<p>下面我们就可以利它来解锁 AX6 的 SSH 了。打开 AX6 的后台并登录，将“stock=”后面的字符串<code>7e633591ff0e2b8ac3d73846fb354297</code>拷贝下来，
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_XtkR0S.png" alt="Img">
打开我们初始化设置 OP 时候保存的网址，把字符串粘贴并覆盖<code>&lt;stok&gt;</code>的字样。将 <code>ssid</code> 和 <code>password</code> 改为移动热点的名称和密码，<code>admin_username</code> 和 <code>admin_password</code> 改为 Openwrt 的用户名和密码。修改完成后我们先简单看一下这个链接 <code>http://192.168.31.1/cgi-bin/luci/;stok=ee9d9cea23fc167cddf2b5543110d3b3/api/xqsystem/extendwifi_connect_inited_router?ssid=op&amp;password=12345678&amp;admin_username=root&amp;admin_password=password&amp;admin_nonce=xxx</code>，实际上前半部分是小米路由器的地址，使用了一个 extendwifi 的接口，extendwifi 顾名思义就是扩展 wifi，然后把我们做好的 OP 系统的 wifi 信息及登录信息填入，原理因该就是把 OP 当作扩展 wifi 实现解锁，以上都是我猜的。修改完成后，将连接复制到浏览器中点击回车。大概 20 秒后会弹出这串字符，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;token&#34;</span><span class="p">:</span> <span class="s2">&#34;; nvram set ssh_en=1; nvram set uart_en=1; nvram set boot_wait=on; nvram commit; uci set wireless.@wifi-iface[0].key=`mkxqimage -I`; uci commit; sed -i &#39;s/channel=.*/channel=\&#34;debug\&#34;/g&#39; /etc/init.d/dropbear; /etc/init.d/dropbear start;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;code&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>证明解锁成功。此时我们登录 AX6 的后台，5G 频段 wifi 的密码应该已经改为 SSH 密码了。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_pg58Oo.png" alt="ssh密码"></p>
<h3 id="4-验证-ssh-并备份">4 验证 SSH 并备份</h3>
<p>我们打开 CMD，通过 SSH 登录 AX6 <code>ssh root@192.168.31.1</code>，输入我们刚刚获取的密码，即可正常登录。到此为止，解锁 SSH 的全部操作就结束了，经测试使用此方法可以成功解锁 AX6、AX3600、AX6000 以及 AX9000，通用性和传统方式没有区别。</p>
<p>链接成功后进行备份</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir /tmp/syslogbackup/
</span></span><span class="line"><span class="cl">dd <span class="k">if</span><span class="o">=</span>/dev/mtd9 <span class="nv">of</span><span class="o">=</span>/tmp/syslogbackup/mtd9
</span></span></code></pre></div><p>浏览器请求该地址下载备份 <a href="http://192.168.31.1/backup/log/mtd9">http://192.168.31.1/backup/log/mtd9</a></p>
<h3 id="5-固化-ssh-可选">5 固化 SSH （可选）</h3>
<p>默认情况下，当路由器恢复出厂设置或者升级后，相关权限将会丢失，因此我们需要额外的操作以保留它们通过 SSH 连接 AX6。在电脑上将下载好的<a href="https://github.com/shell-script/unlock-redmi-ax3000/archive/refs/heads/master.zip">脚本</a>上传到红米 AX6，可以通过命令行操作，在 Windows 电脑上打开终端，切换到脚本所在目录，输入以下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp ax3000.sh root@192.168.31.1:/etc/ax3000.sh
</span></span><span class="line"><span class="cl">scp fuckax3000 root@192.168.31.1:/etc/fuckax3000
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_HcClrR.png" alt="命令行传输脚本"></p>
<p>也可以通过 <code>winscp</code>，文件协议选择 <code>scp</code>，输入 AX6 的 IP 地址 <code>192.168.31.1</code> ，用户名为 <code>root</code>，密码 <code>SSH 密码</code>。登录后在右侧路由器的文件系统中选择 <code>/etc</code> 文件夹，左侧电脑的文件系统中选择要上传的脚本文件 <code>ax3000.sh</code> 和 <code>fuckax3000</code>，选中文件，右键单击，选择上传即可。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_6wm6Ks.png" alt="winscp上传传输脚本"></p>
<p>然后在红米 AX6 上执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh /etc/ax3000.sh unlock
</span></span></code></pre></div><p>系统会自动重启，路由器会自行重启，重启后执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh /etc/ax3000.sh hack
</span></span></code></pre></div><p>重启完成后你可以联网升级，升级最新的固件可以</p>
<p>💁 <strong>备注：升级固件后丢失 SSH 权限，你也可以 telnet 连接上 AX6 后执行以下命令，即可恢复 SSH。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/channel=.*/channel=&#34;debug&#34;/g&#39;</span> /etc/init.d/dropbear
</span></span><span class="line"><span class="cl">/etc/init.d/dropbear start
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span></code></pre></div><p><code>telnet 192.168.31.1</code> （用户名是 <code>root</code>，密码是<code>解锁 SSH 得出的密码</code>）</p>
<p>Windows 和 Mac 默认都没有开启 <code>telnet</code> 功能，Windows 可以搜索打开 <code>telnet</code> 功能，Mac 可以搜索先安装 <code>brew</code>，再通过 <code>brew</code> 安装 <code>telnet</code>。</p>
<h2 id="安装使用-shellclash">安装使用 ShellClash</h2>
<ul>
<li>
<p>重新通过 SSH 连接上红米 AX6 执行安装（请不要使用 telnet 连接安装 ShellClash，否则会乱码；如果执行提示 ssh 连接不上请检查上一步是否执行了）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -kfsSl https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master/install.sh<span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> /etc/profile <span class="p">&amp;</span>&gt; /dev/null
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_3Fsft6.png" alt="执行脚本"></p>
</li>
<li>
<p>选择 1 安装到 <code>/data</code>，然后再选择 1 确认安装。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_DpSFpP.png" alt="步骤1️⃣"></p>
</li>
<li>
<p>安装好就能使用 <code>clash</code> 命令了 ，输入 <code>clash</code> 就能进入配置。这里选择 1 让局域网设备都能走代理。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_iLhaPB.png" alt="步骤2️⃣"></p>
</li>
<li>
<p>推荐选择不代理 UDP 也就是 1，然后安装 DashBoard 面板也就能网页直接控制了也就是 1 。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_BOigNj.png" alt="步骤3️⃣"></p>
</li>
<li>
<p>推荐选择 Yacd 面板，界面很好看。选择 3，然后安装目录选择 1 即可。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_cyDEka.png" alt="步骤4️⃣"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_BqKQUv.png" alt="步骤5️⃣"></p>
</li>
<li>
<p>选择导入配置文件。如果你没有 Clash 的配置文件而是 v2ray、ss、trojan 的订阅链接（你的机场会提供），你可以再选择 1 进行「在线生成 Clash 配置文件」；如果有的话可以选择 2 直接导入配置文件。</p>
</li>
<li>
<p>然后粘贴上你的订阅链接（url 链接），再选择 1 开始生成配置文件。生成配置文件后按 0 返回上层菜单即可。</p>
</li>
<li>
<p>再按 1 选择立即开启 Clash 的服务即可。</p>
</li>
<li>
<p>启动后你可以通过 <a href="http://192.168.31.1:9999/ui">http://192.168.31.1:9999/ui</a> ，进行节点的切换和规则的选择。当然你再按 4 选择开机启动也可以。</p>
</li>
</ul>
<h2 id="不扩容刷入-openwrt-固件">不扩容刷入 openwrt 固件</h2>
<p>与解锁 SSH 不同，刷 OP 系统不同型号的路由器在操作上有所区别。因为闪存容量不同等原因，导致分区数量和大小也不尽相同，存放固件的系统分区也会有区别，所以下面的刷机方法仅针对红米 AX6。</p>
<p>在刷入固件之前，我们先来查看一下当前系统使用的分区，也就是我们降级固件时刷入的 1.0.18 版本固件所在分区。输入这条命令 <code>nvram get flag_last_success</code> 即可查看当前分区，<code>如果返回数字 0，表示当前系统分区为 mtd12</code>，<code>返回数字 1，则表示当前系统分区为 mtd13</code>。我们点击回车来看一下结果。返回的是数字 0！
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_gpePCp.png" alt="查看当前分区">
这里有一点需要说明一下，以下刷机操作及切换分区的步骤，<code>仅针对当前分区的查询结果返回数字 0 的情况</code>，如果你的查询结果返回 1，刷机操作的相关语句会稍有区别，请到附件的步骤详解中查看，不再单作演示了。返回数字 0，也就是当前系统使用分区为 12 分区，同时也意味着降级前的 1.1.4 版本官方固件在 13 分区。我们的理想方式是<code>保留 13 分区的固件将 OP 刷入到 12 分区替换 1.0.18 版固件</code>。实现新版官方固件和 OP 双系统并存。但由于 12 分区正在使用，无法刷入固件。所以我们先要手动切换系统分区。输入这四条命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_last_success</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_boot_rootfs</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">nvram commit
</span></span><span class="line"><span class="cl">reboot
</span></span></code></pre></div><p>切换系统分区为 13 分区并提交修改重启路由器。重启完成后我们可以看到固件版本为 1.1.4，已经切换为 13 分区。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_XHOxio.png" alt="切换固件版本">
下面就可以将要刷入的 OP 固件上传到路由器了，打开 <code>winscp</code>，文件协议选择 <code>scp</code>，输入 AX6 的 IP 地址 <code>192.168.31.1</code> ，用户名为 <code>root</code>，密码 <code>SSH 密码</code>。登录后在右侧路由器的文件系统中选择 <code>/tmp</code> 文件夹，左侧电脑的文件系统中选择要上传的 <code>openwrt 固件</code>，<a href="https://pan.baidu.com/s/1zBtzdk1ERG4SYeTHu-b2lw">下载链接</a>，提取码为：<code>2333</code>。我们上传 <code>factory 结尾的固件</code>即可，<code>sysupgrade</code> 为升级固件，一般可在页面端进行升级。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_PnWBZt.png" alt="上传固件">
刷新固件操作很简单。登录 ssh 后，输入这条命令 <code>ubiformat /dev/mtd12 -y -f /tmp/openwrt-ipq807x-generic-redmi_ax6-squas hfs-nand-factory.ubi</code> 即可将上传的固件刷入到 12 分区。之后我们输入下面四条命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_last_success</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_boot_rootfs</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">nvram commit
</span></span><span class="line"><span class="cl">reboot
</span></span></code></pre></div><p>切换启动分区为 12 分区并提交重启。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_9nfywQ.png" alt="刷新固件">
重启完成后我们即可登录 OP 系统了。恩山固件默认的 ip 地址为 <code>192.168.123.1</code>，用户名为 <code>root</code>，密码默认为 <code>password</code>。进入系统后我们先进行一下系统升级，选择 <code>sysupgrade</code> 文件进行升级，
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_73zUA0.png" alt="系统升级">
重启后登录系统即可进行初始化设置，硬路由刷 OP 后初始化设置很简单，基本和普通路由器一样！我们先来<code>设置登录密码</code>，然后<code>设置拨号上网</code>，再<code>修改一些 wifi 名称和密码设置</code>，<code>保存并应用</code>！等待修改生效后，即可正常使用了！
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_Ogzy2c.png" alt="设置拨号上网">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_vLLyAG.png" alt="设置 wifi">
如果我们用 OP 系统不太顺手，可以随时切换回官方固件。打开终端，输入 openwrt 的 IP 地址 <code>192.168.123.1</code> ，用户名为 <code>root</code>，密码 <code>password</code> 登录 SSH 后，输入下面的三行命令即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fw_setenv flag_last_success <span class="m">1</span>
</span></span><span class="line"><span class="cl">fw_setenv flag_boot_rootfs <span class="m">1</span>
</span></span><span class="line"><span class="cl">reboot
</span></span></code></pre></div><p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_WoG4ym.png" alt="切换官方固件">
切换回官方固件分区的命令和刚才切换到 OP 分区命令很像，但又有所区别！这是由于当前所使用的系统不同导致的，<code>openwrt 切换到小米固件时，使用 fw_setenv</code>，<code>从小米固件切换回 openwrt 固件时使用 nvram set</code>！⚠️ 还有一点需要注意，使用官方固件时，如果未来还想使用 OP 系统，一定关闭自动升级功能，自动升级后会覆盖 OP 系统的分区。⚠️</p>
<h2 id="扩容刷入-openwrt-固件">扩容刷入 openwrt 固件</h2>
<h3 id="扩容刷机原理">扩容刷机原理</h3>
<p>所谓扩容就是将多个分区合并为一个分区。AX6 的两个系统分区分别为 <code>mtd12</code> 和 <code>mtd13</code>，对应的分区名为 <code>rootfs</code> 和 <code>rootfs1</code>。扩容操作是不是将这两个分区进行合并呢？答案是否定的！实际上扩容操作是将名为 <code>overlay</code> 的 <code>14分区</code> 并入到 <code>13分区</code>，<code>13分区</code> 的空间大小约为 <code>36兆</code>，<code>14分区</code> 的空间大小约为 <code>31兆</code>，合并后的空间为共计 <code>68兆</code> 左右。相比于扩容前多出近一倍。为我们刷入更大的 OP 固件留有了余地。并且合并后分区名依然为 <code>rootfs1</code>。至于为什么不将原有两个系统分区 <code>12分区</code> 和 <code>13分区</code> 进行合并，我们会在后面讲到！由于扩容操作需要合并分区，合并分区会涉及到修改分区表，我们需要在 <code>mtd1</code> 分区刷入扩容分区表，但是官方固件是锁分区的，导致我们没有权限进行扩容操作，所以我们要刷入一个临时的 op 固件，通过它来完成扩容操作。我们刚刚提到过 AX6 的系统分区为 <code>12分区</code>和 <code>13分区</code>，这意味着无论是官方固件还是 OP 固件，都只能刷入到两个系统分区中，我们将过度固件刷入到 <code>mtd12分区</code>，再通过它完成扩容操作。这就是保留 <code>12分区</code> 的原因。</p>
<p><strong>所以扩容刷机共分为三步：</strong></p>
<ol>
<li>刷入合并分区使用的临时 OP 固件</li>
<li>合并分区</li>
<li>最后再将 OP 固件刷入到合并分区中</li>
</ol>
<h3 id="扩容刷机实操">扩容刷机实操</h3>
<p>首先我们先要刷入临时 OP 固件。刷 OP 固件第一步就是解锁 SSH，有关解锁 SSH 的操作步骤，请阅读<a href="#%E8%A7%A3%E9%94%81-ssh">解锁 SSH</a> 部分。刷机前我们先要将临时 OP 固件上传到路由器的 tmp 文件夹，打开 <code>winscp</code>，文件协议选择 <code>scp</code>，主机名输入小米路由器 ip 地址 <code>192.168.31.1</code>，用户名为 <code>root</code>，密码为<code>解锁 SSH 获取的密码</code>。登录后我们在右侧的路由器文件系统中选择 <code>/tmp</code> 目录，在左侧 windows 文件系统中，选择要上传的临时 OP 固件进行上传。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_98JaAN.png" alt="上传临时 op 固件">
上传完毕后，我们打开 cmd，输入<code>ssh root@192.168.31.1</code>这行命令登录 SSH，密码为解锁 SSH 获取的密码，登录完成后输入以下两行命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_last_success</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_boot_rootfs</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">nvram commit
</span></span></code></pre></div><p>其中数字 0 代表 12 分区，
这两行命令的含义为<code>下次启动时将 12 分区作为系统分区</code>，也就是从 12 分区启动。设置好启动分区了，我们输入这行命令 <code>mtd write /tmp/xiaomimtd12.bin rootfs</code>，将上传的临时 op 固件刷入到 <code>12 分区</code>。完成后输入 <code>reboot</code> 重启路由器。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_aWIvXG.png" alt="刷入临时 op 固件">
稍等片刻后在浏览器中输入临时 OP 固件的默认登录地址 <code>192.168.1.1</code>，如果正常打开登录页面表示系统启动完毕。⚠️ 不要通过路由器指示灯判断是否启动完毕，刷入临时 op 固件后指示灯一直处于熄灭状态。⚠️ 临时 op 固件启动完成后，我们就可以进行合并分区的操作了，我们先把合并分区需要用到的分区表文件上传到路由器的 <code>tmp</code> 文件夹，打开 <code>winscp</code>，文件协议选择 <code>scp</code>，ip 地址输入临时 op 固件的默认地址 <code>192.168.1.1</code>，默认密码为空。登录成功后，在路由器文件系统选择 <code>tmp</code> 目录，在 windows 系统中选择<code>扩容使用的分区表文件</code>并将其上传。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_hhOvxq.png" alt="上传分区表文件">
上传完毕后，打开 cmd，登录 SSH，密码为空。登录完成后依次输入下面两行命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">. /lib/upgrade/platform.sh（注意. /之间有个空格）
</span></span><span class="line"><span class="cl">switch_layout boot<span class="p">;</span> do_flash_failsafe_partition a6minbib <span class="s2">&#34;0:MIBIB&#34;</span>
</span></span></code></pre></div><p>由于分区信息存储在 <code>mtd1</code> 分区，所以<code>这两行命令的作用就是解锁 1 分区</code>，并刷入上传的扩容分区表文件。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_b6JgjC.png" alt="解锁 1 分区刷入上传的扩容分区表文件">
⚠️ <strong>操作完成后我们一定要将路由器断电重启，也就是重新插拔电源。这里有一点要特别注意，只要是涉及分区表的操作，操作完成后一定要断电重启，否则会导致路由器变砖。</strong> ⚠️ 重启后，我们登录临时 OP 固件的后台，如果能正常打开登录页面表示重启完毕。到此为止扩容操作就完成啦！下面我们来看一下扩容后分区表的变化。我们重新登录 SSH <code>ssh root@192.168.1.1</code>，如果出现公钥报错，删除报错提示的.ssh 目录之后再重新登录，输入 yes 即可登录。登录成功后，输入下面这行命令 <code>cat /proc/mtd</code> 来查看一下分区表，我们可以看到原先的名为 <code>overlay</code> 的 <code>14 分区</code> 不见了，
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_KiYNhJ.png" alt="查看分区表">
我们再输入这条命令 <code>cat /proc/partitions</code> 来看看分区大小，我们可以看到名为<code>rootfs1</code>的<code>13 分区</code> 变为 <code>68 兆</code>，和我们在扩容原理中讲解的合并分区的大小一致，此时两根分区已经合并成功！
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_EZHJZ0.png" alt="查看分区大小"></p>
<p>下面我们将 OP 系统刷入到 <code>13 分区</code>就可以完成扩容刷机的操作了！首先我们要上传要刷入的 OP 固件。打开 <code>winscp</code>，文件协议选择 <code>scp</code>，ip 地址为 <code>192.168.1.1</code>，密码为空，登陆成功后，我们在右侧路由器文件系统中选择 <code>tmp</code> 文件夹，windows 系统选择要刷入的 OP 固件后进行上传。我们可以看到这次上传的 OP 固件大小为 50 兆，远远超过不扩容刷机固件小于 30 兆的限制，并且距离 68 兆的系统分区大小也还有余量，方便后期安装插件。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_Ckzds0.png" alt="上传 op 固件">
上传完毕后，我们打开 SSH，输入这条命令 <code>ubiformat /dev/mtd13 -y -f /tmp/openwrt-ipq807x-generic-xiaomi_ax6-squashfs-nand-factory.bin</code>，将上传的 OP 固件刷入到 13 分区。完成后，我们输入下面三条命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fw_setenv flag_last_success <span class="m">1</span>
</span></span><span class="line"><span class="cl">fw_setenv flag_boot_rootfs <span class="m">1</span>
</span></span><span class="line"><span class="cl">reboot
</span></span></code></pre></div><p>将启动分区切换为 13 分区后重启。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_0zN0G4.png" alt="Img">
如果您刷入是我在附件中提供的 OP 固件，默认登录地址 <code>192.168.1.1</code>，打开登录页面后，点击登录按钮即可进入 OP 系统的后台。到此为止扩容刷机的所有步骤就完成了。</p>
<h3 id="刷回官方固件原理">刷回官方固件原理</h3>
<p>如果您使用 OP 不太顺手，想刷回官方固件也是可行的。我们需要进行两步操作：</p>
<ul>
<li>首先刷入官方固件到 12 分区</li>
<li>然后在 1 分区刷回官方分区表（将合并后 13 分区恢复为原始的 13 分区和 14 分区！）</li>
</ul>
<h3 id="刷回官方固件实操">刷回官方固件实操</h3>
<p>我们先打开 <code>winscp</code>，文件协议选择 <code>SCP</code>，地址为我们刷入 op 固件的登录地址 <code>192.168.1.1</code>，用户名 <code>root</code>，密码为空。登陆成功后，在路由器的文件系统中选择 <code>tmp</code> 文件夹，在 windows 的系统中上传 ax6 的官方固件以及官方分区文件。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_GyzJPQ.png" alt="上传 ax6 官方固件和官方分区文件">
上传完毕后我们登录 ssh <code>ssh root@192.168.1.1</code> 进行刷机操作，如果出现公钥报错，如法炮制，删除 .ssh 文件夹后从重新进行登录。登录完成后，输入这条命令 <code>ubiformat /dev/mtd12 -y -f /tmp/AX6_1.1.4.ubi</code> 将刚刚上传的官方固件刷入到 12 分区。之后输入这条命令 <code>mtd write /tmp/ybmibib.bin /dev/mtd1</code>，将分区表文件刷入 1 分区。操作完成后，输入下面两条命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fw_setenv flag_last_success <span class="m">0</span>
</span></span><span class="line"><span class="cl">fw_setenv flag_boot_rootfs <span class="m">0</span>
</span></span></code></pre></div><p>将启动分区改为 12 分区。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_06_zbXJRR.png" alt="刷回官方固件">
完成后重启路由器即可！
⚠️ 此处要特别注意，由于我们刚刚修改了分区表，所以一定进行断电重启。⚠️ 重启完成后我们打开浏览器输入 <code>192.168.31.1</code>，即可打开小米路由器官方固件的初始化页面。到此为止，刷回官方固件的操作就完成了。</p>
<h3 id="uboot-刷机原理">Uboot 刷机原理</h3>
<p>如果扩容刷机的分区容量依然无法满足需求，那么你可以考虑 Uboot 刷机！⚠️ <strong>Uboot 刷机属于扩容刷机的一种，同样涉及修改分区表，所以我们同样先要<a href="#%E6%89%A9%E5%AE%B9%E5%88%B7%E6%9C%BA%E5%AE%9E%E6%93%8D">刷入 OP 系统</a>，在 OP 系统下才能进行 uboot 刷机的相关操作。</strong> ⚠️ 刷入 OP 系统的方法使用刷入临时 OP 的方法即可。</p>
<p>Uboot 刷机操作分为两步：</p>
<ul>
<li>合并分区</li>
<li>刷入引导程序</li>
</ul>
<p><code>合并分区通过将扩容分区表刷入到 mtd1 分区，从而把 12、13、14 分区进行合并，合并后的系统分区可达 104 兆，这已经是 AX6 128 兆闪存的极限了。</code></p>
<p><code>刷入引导程序是在 mtd7 分区刷入改版的 uboot 引导程序替换官方 uboot 引导程序。</code></p>
<p>刷入改版引导程序有两点好处：</p>
<ul>
<li>第一点 改版引导程序具有图形化界面，<code>可以让我们在 web 端实现刷机操作</code>，相比前面讲解的命令行刷机方式，大大简化了刷机步骤！</li>
<li>第二点 由于引导程序是先于路由器固件启动的，所以在路由器固件出现任何问题时，我们都可以通过引导程序的图形化界面重新刷机，<code>基本避免了固件原因导致路由器变砖的风险</code>！</li>
</ul>
<p>当然 uboot 刷机的缺点也是有的:</p>
<ul>
<li>经过实验目前只能通过 ttl 的方式刷回官方固件。对于小白用户来说并不友好，希望未来会有更简便的刷回官方固件的方法。</li>
</ul>
<h3 id="uboot-刷机实操谨慎尝试">Uboot 刷机实操（谨慎尝试）</h3>
<p><a href="https://op.supes.top/tools/AX6%E5%88%B7%E6%9C%BA.zip">扩容分区表文件和 uboot 文件下载链接</a>
<a href="https://supes.top/?target=ipq807x%2Fgeneric&amp;id=redmi_ax6">openwrt 固件下载链接</a></p>
<p>首先上传要刷入的文件，打开 <code>winscp</code>，文件协议选择 <code>scp</code>，主机名为 <code>192.168.1.1</code>，用户名 <code>root</code>，密码为空，成功登录后在路由器系统选择 <code>tmp</code> 文件夹，在 windows 系统中选择扩容分区表文件 <code>ax6-uboot-mibib.bin</code> 和改版 uboot 文件 <code>ax6-uboot.bin</code> 进行上传。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_08_ZAl9xq.png" alt="上传分区表文件和 uboot 文件"></p>
<p>上传完毕后，打开 cmd 登录 ssh，输入下面两行命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtd erase /dev/mtd1
</span></span><span class="line"><span class="cl">mtd write /tmp/ax6-uboot-mibib.bin /dev/mtd1
</span></span></code></pre></div><p>擦除 <code>mtd1</code> 分区，再写入刚上传的扩容分区表文件。完成后再输入下面两行命令，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtd erase /dev/mtd7
</span></span><span class="line"><span class="cl">mtd write /tmp/ax6-uboot.bin /dev/mtd7
</span></span></code></pre></div><p>擦除 <code>mtd7</code> 分区并写入刚上传的改版 uboot 引导程序。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_08_xUmHpO.png" alt="写入扩容分区表文件和 uboot 引导程序"></p>
<p>⚠️ 我们刚刚修改了分区表，写入完成后一定要记得断电重启！⚠️</p>
<p>由于我们把两个系统分区和 overlay 分区进行了合并，当前路由器中是没有安装系统的，所以我们先要登录改版 uboot 的图形化界面刷入 OP 固件。启动 uboot 图形化界面的方式很简单，使用网线将电脑与路由器相连后先按住 <code>reset</code> 按钮再接通电源，大概五秒钟后看到指示灯变黄后松开 <code>reset</code> 按钮即可。图形化界面的登录地址为 <code>192.168.1.1</code>，所以我们要在网络设置中，将连接 ax6 的网卡 ip 地址设置为<code>192.168.1</code> 网段的任一地址。修改完成后，打开浏览器输入 <code>192.168.1.1</code> 即可进入 uboot 图形化界面。点击选择文件，在电脑中选取我们要刷入的 OP 固件后，点击 <code>update firmware</code> 即可刷入固件。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_08_ZaJimN.png" alt="刷入底包">
刷入完成后路由器会自动重启。等待过程中，我们先把 ip 地址改回自动获取。依据刷入的 op 固件，重启成功后，在浏览器中输入 op 后台的登录地址即可打开 op 登录页面，如果是刷入我提供的 openwrt 固件，登录地址为 <code>10.0.0.1</code>，初始密码为：<code>root</code>。进入登录页面，选择<code>系统</code>菜单下的<code>备份/升级</code>选项，打开页面，点击<code>刷写固件</code>按钮，选择以 <code>sysupgrade</code>结尾的文件，点击<code>上传</code>，去掉<code>保持设置并保留当前配置</code>选项前的勾，点击<code>继续</code>， 开始刷入，路由器会自动重启。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_08_VAPbWW.png" alt="刷入正式固件1️⃣">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2022_10_08_srHEPi.png" alt="刷入正式固件2️⃣">
等待路由器自动重启完成，蓝灯常亮后，会自动跳转到后台登录界面，或者手动输入后台地址，至此 uboot 刷机的所有操作就完成了。</p>
<h2 id="总结">总结</h2>
<p>红米 AX6 基本就这些刷机方法，得益于红米 AX6 超强的 CPU + NPU 组合，跑代理速度是真不错。ShellClash 这种方案虽然没有图形化 UI 操作方便，但好在不需要刷麻烦也不稳定的 openwrt 固件，直接小米官方固件也能享受到网络「加速」的福利。所以推荐部署 ShellClash 方案。如果你还有其他更多的需求，那还是得安装 openwrt，推荐扩容刷机里的 uboot 刷机方案，虽然操作有一定风险变砖，但好在刷完以后有图形化界面可供使用，大大降低了再次刷机的难度。</p>
<p>红米 AX6 目前解锁 SSH 稍微有点麻烦，不过胜在性价比高。如果你动手能力强，喜欢折腾，我还是更推荐你购买 AX6， 如果想省点精力也可以看看其他的小米路由器，解锁 SSH 没有 AX6 复杂，性价比也都不错。</p>
]]></content:encoded></item><item><title>你真的清楚流程图规范吗？</title><link>https://alphapenng.github.io/zh-cn/2022/08/03/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%B8%85%E6%A5%9A%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%A7%84%E8%8C%83%E5%90%97/</link><pubDate>Wed, 03 Aug 2022 11:07:44 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/08/03/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%B8%85%E6%A5%9A%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%A7%84%E8%8C%83%E5%90%97/</guid><description>流程图作为一种表达算法和思路最好的方法，一直在我们的生活中扮演着重要的角色。但是很多人画流程图都是大概一画，并没有按照流程图规范来画。难道流</description><content:encoded><![CDATA[<p>流程图作为一种表达算法和思路最好的方法，一直在我们的生活中扮演着重要的角色。但是很多人画流程图都是大概一画，并没有按照流程图规范来画。难道流程图没有一个统一的规范吗？流程图当然有规范的画法，下面我来为大家介绍一些流程图规范。</p>
<p>既然说起流程图规范，那不得不提的就是流程图的三大结构。在说三大结构之前，首先需要注意的就是流程图的符号要求。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_5vn0wT.jpg" alt="1"></p>
<p>如上图所示，这些就是流程图设计中比较常用的一些形状。它们都有特定的含义，所以不能乱用。在流程图规范中，流程图的符号使用是最容易出错的。下面我为大家找到一张图片，可以清晰的说明每个符号是干什么的：</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_3321ZS.jpg" alt="2"></p>
<p>流程图规范需要注意三大结构，这三大结构分别为顺序结构、选择结构和循环结构，这三个结构构成了流程执行的全过程。首先是顺序结构：</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_drmF7b.jpg" alt="3"></p>
<p>正如上图所示，流程图是需要按照顺序来设计的，这是最简单的基本结构，很容易理解，但也是流程图的核心。</p>
<p>第二点要注意的是选择结构，选择结构又称分支结构，选择结构用于判断给定的条件，根据判断的结果判断某些条件，根据判断的结果来控制程序的流程。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_IVJeaa.jpg" alt="4"></p>
<p>上图就很好的展现出了选择结构的运算原理，选择结构的运用也是流程图规范中不可忽视的一点。</p>
<p>最后一点是循环结构，循环结构又可以分为当型结构和直到型结构。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_kFj8sq.jpg" alt="5"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_17_LBiUql.jpg" alt="6"></p>
<p>上图就是这两种结构的具体步骤展示。循环结构可以看成是一个条件判断条件和一个向回转向条件的组合，循环结构的包括三个要素：循环变量、循环体和循环终止条件。最终结果由输入的条件决定。这就是流程图规范中的三大结构</p>
]]></content:encoded></item><item><title>华为路由交换设备命令手册</title><link>https://alphapenng.github.io/zh-cn/2022/08/03/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</link><pubDate>Wed, 03 Aug 2022 10:56:52 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/08/03/%E5%8D%8E%E4%B8%BA%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</guid><description>概述 适用设备 本命令手册主要适用于华为 NE 路由器系列型号设备及 5700 交换机系列型号设备。 命令格式 序号 格式 意义 1 粗体 命令关键字，在命令中保持不变，原样</description><content:encoded><![CDATA[<h2 id="概述">概述</h2>
<ul>
<li>适用设备
本命令手册主要适用于华为 NE 路由器系列型号设备及 5700 交换机系列型号设备。</li>
<li>命令格式</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>格式</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>粗体</td>
<td>命令关键字，在命令中保持不变，原样照输，采用加粗字体表示</td>
</tr>
<tr>
<td>2</td>
<td>斜体</td>
<td>命令参数，在命令中以实际值进行替代，采用斜体字体表示</td>
</tr>
<tr>
<td>3</td>
<td>&lt;&gt;</td>
<td>命令必选参数，在输入命令时必须配置该参数</td>
</tr>
<tr>
<td>4</td>
<td>[]</td>
<td>命令可选参数，在输入命令时根据需要配置该参数</td>
</tr>
<tr>
<td>5</td>
<td>x | y | &hellip;</td>
<td>表示从两个或多个选项中选取 1 个</td>
</tr>
</tbody>
</table>
<h2 id="路由器">路由器</h2>
<h3 id="名称">名称</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 采用「X_Y_Z」的形式，路由器 X 为战区名称简写，Y 为节点名称简写，Z 为设备型号，如果
</span></span><span class="line"><span class="cl">存在同型号的多台设备，按 A、B、C、D 的顺序进行编号，在型号后增加编号序列
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>R<span class="p">&gt;</span>sys
</span></span><span class="line"><span class="cl">[R]sys DB_HJ_NE20-X3
</span></span></code></pre></div><h3 id="接口">接口</h3>
<p>（1）环回接口（ Lookback ） 配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 配置 OSPF 协议、BGP 协议、MPLS 的 LDP 协议时必须配置相关协议的路由器 ID，且统一
</span></span><span class="line"><span class="cl">采用最小环回口地址作为路由器 ID
</span></span><span class="line"><span class="cl">[R]int loo0
</span></span><span class="line"><span class="cl">[R-loo0]ip add 1.1.1.1 32
</span></span></code></pre></div><p>（2）GE 网口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 主要配置包括介质类型、接口自协商、接口速率、流控、单 / 双工模式等基本功能
</span></span><span class="line"><span class="cl"># 接口缺省开启自协商功能，采用电口互连时，一般采用自协商方式互通
</span></span><span class="line"><span class="cl">[R]int g0/0/0
</span></span><span class="line"><span class="cl">[R-g0/0/0]port-type copper
</span></span><span class="line"><span class="cl">[R-g0/0/0]ip add 10.0.0.1 24
</span></span><span class="line"><span class="cl"># 采用光口互连时，一般要求关闭接口自协商功能，配置固定速率互通
</span></span><span class="line"><span class="cl">[R]int g0/0/1
</span></span><span class="line"><span class="cl">[R-g0/0/1]port-type fiber-1000
</span></span><span class="line"><span class="cl">[R-g0/0/1]undo negotiation auto
</span></span><span class="line"><span class="cl">[R-g0/0/1]speed 1000
</span></span><span class="line"><span class="cl">[R-g0/0/1]ip add 10.0.0.2 24
</span></span></code></pre></div><p>（3）10GE 网口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 10GE 以太网接口可配置为广域网模式或局域网模式
</span></span><span class="line"><span class="cl">[R]int g5/0/0
</span></span><span class="line"><span class="cl">[R-g5/0/0]ip add 10.1.1.1 24
</span></span><span class="line"><span class="cl">[R-g5/0/0]set transfer-mode wan
</span></span></code></pre></div><p>（4）E1 接口</p>
<ol>
<li>
<p>AR 系列路由器 E1-F 接口配置方式</p>
<ul>
<li>
<p>E1-F 接口有两种工作方式，<strong>非成帧方式</strong>和<strong>成帧方式</strong>（建议使用非成帧方式）</p>
<ul>
<li>当 E1-F 接口工作于非成帧方式时，它相当于一个不分时隙、数据带宽为 2048Kbit/s 的接口，其逻辑特性与同步串口相同，支持 PPP、HDLC 和 FR 数据链路层协议，支持 IP 网络协议</li>
<li>当 E1-F 接口工作于成帧方式时，线路分为 32 个时隙，对应编号为 0-31。其中 0 时隙用于传输同步信息，其余时隙可以被任意捆绑成一个通道。E1-F 接口的带宽为 n*64Kbit/s （n是指捆绑的时隙数，最大取值为 31），其逻辑特性与同步串口相同，支持 PPP、HDLC 和 FR 数据链路层协议，支持 IP 网络协议。</li>
</ul>
</li>
<li>
<p>E1-F 接口支持的时钟模式有两种：</p>
<ul>
<li>主时钟模式（内部时钟模式）：接口工作在主时钟模式时，使用芯片内部产生的时钟作为参考。</li>
<li>从时钟模式（线路时钟模式）：接口工作在从时钟模式时，使用线路上恢复出的时钟作为参考。
<strong>两个相连的端口必须为一主一从，时钟由主设备来提供，从设备使用线路上恢复出来时钟，保证能正确识别接收到的数据。</strong></li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># AR 系列路由器基本配置
</span></span><span class="line"><span class="cl">[R]display device //查看 E1T1 接口卡的槽位号，是否在位以及状态是否正常
</span></span><span class="line"><span class="cl">[R]display workmode [slot 槽位 id ｜all] //查看 E1T1 接口卡的工作模式
</span></span><span class="line"><span class="cl">[R]set workmode slot <span class="p">&lt;</span>slot-id<span class="p">&gt;</span> e1-f //配置 E1T1 接口卡工作在 E1-F 模式，默认
</span></span><span class="line"><span class="cl">就是该模式
</span></span><span class="line"><span class="cl">[R]int s2/0/0
</span></span><span class="line"><span class="cl">[R-s2/0/0]fe1 unframed //配置为非成帧方式，默认成帧方式(要配）
</span></span><span class="line"><span class="cl">[R-s2/0/0]fe1 line-termination [75-ohm <span class="p">|</span> 120-ohm] //配置E1-F 接口所连接的
</span></span><span class="line"><span class="cl">线缆类型，默认 120-ohm（不要配）
</span></span><span class="line"><span class="cl">[R-s2/0/0]fe1 clock [master <span class="p">|</span> slave <span class="p">|</span> system] //配置 E1-F 接口的时钟方式，
</span></span><span class="line"><span class="cl">默认为 slave（要配）
</span></span><span class="line"><span class="cl">[R-s2/0/0]crc [16 <span class="p">|</span> 32 <span class="p">|</span> none ] 配置接口的 CRC 校验模式，默认 16 位 CRC 校验，
</span></span><span class="line"><span class="cl">建议修改为 32 位（要配）
</span></span><span class="line"><span class="cl"># 多个 E1 接口捆绑
</span></span><span class="line"><span class="cl">[R]interface mp-group0/0/0
</span></span><span class="line"><span class="cl">[R-mp-group0/0/0]ip add 1.1.13.1 24
</span></span><span class="line"><span class="cl">[R-mp-group0/0/0]interface serial 2/0/0
</span></span><span class="line"><span class="cl">[R-serial2/0/0]ppp mp-group 0/0/0
</span></span><span class="line"><span class="cl">[R-serial2/0/0]interface serial 2/0/1
</span></span><span class="line"><span class="cl">[R-serial2/0/1]ppp mp-group 0/0/0
</span></span></code></pre></div></li>
<li>
<p>NE 系列路由器 CPOS 接口和 E1 接口配置方式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># NE20E 路由器 CPOS 接口配置
</span></span><span class="line"><span class="cl"># 将 CPOS 接口和其通道化出来的 E1 接口配置为主时钟模式
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>NE210E<span class="p">&gt;</span>system-view
</span></span><span class="line"><span class="cl">[NE210E]controller cpos 1/0/0
</span></span><span class="line"><span class="cl">[NE210E-Cpos1/0/0]clock master
</span></span><span class="line"><span class="cl">[NE210E-Cpos1/0/0]e1 1 unframed
</span></span><span class="line"><span class="cl">[NE210E-Cpos1/0/0]e1 1 set clock master
</span></span><span class="line"><span class="cl">[NE210E-Cpos1/0/0]e1 2 unframed
</span></span><span class="line"><span class="cl">[NE210E-Cpos1/0/0]e1 2 set clock master
</span></span><span class="line"><span class="cl"># 创建 Mp-group 接口，配置 IP 地址
</span></span><span class="line"><span class="cl">[NE210E]interface mp-group 0/0/0
</span></span><span class="line"><span class="cl">[NE210E-Mp-group0/0/0]ip address 10.1.1.1 30
</span></span><span class="line"><span class="cl">[NE210E-Mp-group0/0/0]quit
</span></span><span class="line"><span class="cl"># 将串口 Serial1/0/0/1:0 加入 Mp-group 接口
</span></span><span class="line"><span class="cl">[NE210E]interface serial1/0/0/1:0
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/1:0]link-protocol ppp
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/1:0]ppp mp mp-group0/0/0
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/1:0]quit
</span></span><span class="line"><span class="cl"># 将串口 Serial1/0/0/2:0 加入 Mp-group 接口
</span></span><span class="line"><span class="cl">[NE210E]interface serial1/0/0/2:0
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/2:0]link-protocol ppp
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/2:0]ppp mp mp-group0/0/0
</span></span><span class="line"><span class="cl">[NE210E-Serial1/0/0/2:0]quit
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># NE20 路由器 E1 接口配置
</span></span><span class="line"><span class="cl"># 配置 E1 接口的工作模式
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>NE20<span class="p">&gt;</span>system-view
</span></span><span class="line"><span class="cl">[NE20]controller e1 1/0/0
</span></span><span class="line"><span class="cl">[NE20-E1 1/0/0]using e1
</span></span><span class="line"><span class="cl">[NE20-E1 1/0/0]quit
</span></span><span class="line"><span class="cl">[NE20]controller e1 1/0/1
</span></span><span class="line"><span class="cl">[NE20-E1 1/0/1]using e1
</span></span><span class="line"><span class="cl">[NE20-E1 1/0/1]quit
</span></span><span class="line"><span class="cl"># 创建 Mp-group 接口，配置相应的 IP 地址
</span></span><span class="line"><span class="cl">[NE20]interface mp-group 0/0/0
</span></span><span class="line"><span class="cl">[NE20-mp-group0/0/0]ip address 10.1.1.2 30
</span></span><span class="line"><span class="cl">[NE20-mp-group0/0/0]quit
</span></span><span class="line"><span class="cl"># 配置 E1 接口通道化出来的 Serial 接口
</span></span><span class="line"><span class="cl"># 配置串口 Serial1/0/0:0
</span></span><span class="line"><span class="cl">[NE20]interface serial1/0/0:0
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/0:0]link-protocol ppp
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/0:0]ppp mp mp-group0/0/0
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/0:0]quit
</span></span><span class="line"><span class="cl">[NE20]interface serial1/0/1:0
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/1:0]link-protocol ppp
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/1:0]ppp mp mp-group0/0/0
</span></span><span class="line"><span class="cl">[NE20-Serial1/0/1:0]quit
</span></span><span class="line"><span class="cl"># 验证配置
</span></span><span class="line"><span class="cl">[NE20E]dis interface serial 1/0/0/1:0
</span></span><span class="line"><span class="cl">[NE20E]dis interface mp-group 0/0/0
</span></span><span class="line"><span class="cl">[NE20E]dis ppp mp
</span></span></code></pre></div></li>
</ol>
<p>（5）Pos 口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]int pos2/0/0
</span></span><span class="line"><span class="cl">[R-pos2/0/0]link-protocol [ppp <span class="p">|</span> hdlc <span class="p">|</span> fr] // 默认 ppp
</span></span><span class="line"><span class="cl">[R-pos2/0/0]crc [16 <span class="p">|</span> 32] // 默认 32
</span></span><span class="line"><span class="cl">[R-pos2/0/0]clock [slave <span class="p">|</span> master] // 默认 master，一般不需要更改
</span></span><span class="line"><span class="cl">[R-pos2/0/0]frame-format [sdh <span class="p">|</span> sonet] // 默认 sdh，一般不需要更改
</span></span><span class="line"><span class="cl">[R-pos2/0/0]scramble // 默认加扰，可以使用 undo scramble 命令取消
</span></span></code></pre></div><h3 id="认证">认证</h3>
<p>（1）串口登录密码认证</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 控制口登录密码认证
</span></span><span class="line"><span class="cl">[R]user-interface con 0
</span></span><span class="line"><span class="cl">[R-ui-console0]authentication-mode password
</span></span><span class="line"><span class="cl">[R-ui-console0]set authentication password cipher huawei@123
</span></span></code></pre></div><p>（2）aaa 认证</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 控制口登录 aaa 认证
</span></span><span class="line"><span class="cl">[R]user-interface con 0
</span></span><span class="line"><span class="cl">[R-ui-con0]authentication-mode aaa
</span></span><span class="line"><span class="cl">[R]aaa
</span></span><span class="line"><span class="cl">[R-aaa]local-user admin123 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R-aaa]local-user admin123 service-type terminal
</span></span><span class="line"><span class="cl">[R-aaa]local-user admin123 privilege level 15
</span></span><span class="line"><span class="cl"># 配置用户在 10 分钟内错误连接次数为 3 次，3 次输入错误密码，锁定用户并在 10 分钟后
</span></span><span class="line"><span class="cl">解锁
</span></span><span class="line"><span class="cl">[R-aaa]user-block failed-times 3 period 10
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 虚拟终端登录 aaa 认证
</span></span><span class="line"><span class="cl">[R]user-interface vty 0 4
</span></span><span class="line"><span class="cl">[R-ui-vty0-4]authentication-mode aaa
</span></span><span class="line"><span class="cl">[R-ui-vty0-4]protocol inbound all ( 允许 telnet 和 ssh 登录）
</span></span><span class="line"><span class="cl">[R]aaa
</span></span><span class="line"><span class="cl"># telnet 用户
</span></span><span class="line"><span class="cl">[R-aaa]local-user tel123 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R-aaa]local-user tel123 privilege level 15
</span></span><span class="line"><span class="cl">[R-aaa]local-user tel123 service-type telnet
</span></span><span class="line"><span class="cl"># ftp 用户
</span></span><span class="line"><span class="cl">[R-aaa]local-user ftp123 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R-aaa]local-user ftp123 privilege level 15
</span></span><span class="line"><span class="cl">[R-aaa]local-user ftp123 service-type ftp
</span></span><span class="line"><span class="cl">[R-aaa]local-user ftp123 ftp-directory flash:
</span></span><span class="line"><span class="cl"># stelnet 和 sftp 用户
</span></span><span class="line"><span class="cl">[R-aaa]local-user ssh123 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R-aaa]local-user ssh123 privilege level 15
</span></span><span class="line"><span class="cl">[R-aaa]local-user ssh123 service-type ssh
</span></span><span class="line"><span class="cl">[R]ssh user ssh123 authentication-mode password
</span></span><span class="line"><span class="cl">[R]ssh user ssh123 service-type stelent sftp
</span></span><span class="line"><span class="cl">[R]ssh user ssh123 sftp-directory sftp
</span></span><span class="line"><span class="cl"># 开启相应服务器
</span></span><span class="line"><span class="cl">[R]telnet server enable
</span></span><span class="line"><span class="cl">[R]ftp server enable
</span></span><span class="line"><span class="cl">[R]stelnet server enable
</span></span><span class="line"><span class="cl">[R]sftp server enable
</span></span><span class="line"><span class="cl"># ssh 用户（包括 stelnet 和 sftp ) 生成本地密钥对
</span></span><span class="line"><span class="cl">[R]rsa local-key-pair create
</span></span></code></pre></div><p>（3）链路认证（只有 PPP 协议需要配置）</p>
<ul>
<li>PAP 认证(此为单项认证配置，双项认证要求路由器再添加对端的配置命令即可）</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 路由器 1
</span></span><span class="line"><span class="cl">[R1] aaa
</span></span><span class="line"><span class="cl">[R1-aaa]local-user admin1 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R1-aaa]local-user admin1 service-type ppp
</span></span><span class="line"><span class="cl">[R1-aaa]quit
</span></span><span class="line"><span class="cl">[R1]int serial 1/0/0:0
</span></span><span class="line"><span class="cl">[R1-Serial1/0/0:0]ppp authentication-mode pap
</span></span><span class="line"><span class="cl">[R1-Serial1/0/0:0]quit
</span></span><span class="line"><span class="cl"># 路由器 2
</span></span><span class="line"><span class="cl">[R2]int serial1/0/1:0
</span></span><span class="line"><span class="cl">[R2-Serial1/0/1:0]ppp pap local-user admin1 password cipher huawei@123
</span></span></code></pre></div><ul>
<li>CHAP 认证</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 路由器 1
</span></span><span class="line"><span class="cl">[R1]aaa
</span></span><span class="line"><span class="cl">[R1-aaa]local-user admin1 password cipher huawei@123
</span></span><span class="line"><span class="cl">[R1-aaa]local-user admin1 service-type ppp
</span></span><span class="line"><span class="cl">[R1-aaa]quit
</span></span><span class="line"><span class="cl">[R1]int pos2/0/1
</span></span><span class="line"><span class="cl">[R1-pos2/0/1]ppp authentication-mode chap
</span></span><span class="line"><span class="cl">[R1-pos2/0/1]q
</span></span><span class="line"><span class="cl"># 路由器 2
</span></span><span class="line"><span class="cl">[R2]int pos2/0/1
</span></span><span class="line"><span class="cl">[R2-pos2/0/1]ppp chap user admin1
</span></span><span class="line"><span class="cl">[R2-pos2/0/1]ppp chap password cipher huawei@123
</span></span><span class="line"><span class="cl">[R2-pos2/0/1]q
</span></span></code></pre></div><h3 id="ospf">OSPF</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 基本配置
</span></span><span class="line"><span class="cl">[R]ospf 1 router-id 1.1.1.1
</span></span><span class="line"><span class="cl"># 修改 OSPF 优先级（此参数建议谨慎修改，会影响全局路由）
</span></span><span class="line"><span class="cl">[R-ospf-1]preference 30
</span></span><span class="line"><span class="cl"># 修改 OSPF ASE 优先级（此参数建议谨慎修改，会影响全局路由）
</span></span><span class="line"><span class="cl">[R-ospf-1]preference ase 30
</span></span><span class="line"><span class="cl"># 修改 OSPF 协议计算路由参考带宽 10000Mbit/s
</span></span><span class="line"><span class="cl">[R-ospf-1]bandwidth-reference 10000
</span></span><span class="line"><span class="cl"># OSPF 区域配置
</span></span><span class="line"><span class="cl">[R-ospf-1]area 0
</span></span><span class="line"><span class="cl"># 配置OSPF 区域认证
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.0]authentication-mode md5 1 huawei
</span></span><span class="line"><span class="cl"># 宣告路由
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.0]network 5.1.2.4 0.0.0.3  
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.0]area 1
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.1]nssa //配置 OSPF nssa 区域
</span></span><span class="line"><span class="cl"># 在区域 1 中配置区域间路由聚合
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.1]network 20.0.1.0 0.0.0.255
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.1]network 20.0.2.0 0.0.0.255
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.1]network 20.0.3.0 0.0.0.255
</span></span><span class="line"><span class="cl">[R-ospf-1-area-0.0.0.1]abr-summary 20.0.0.0 255.255.252.0
</span></span><span class="line"><span class="cl"># 通过路由策略引入路由
</span></span><span class="line"><span class="cl">[R]acl 2000
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]rule permit source 192.168.1.0 0.0.0.255
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]route-policy rp1 permit node 1
</span></span><span class="line"><span class="cl">[R-route-policy]if-match acl 2000
</span></span><span class="line"><span class="cl">[R-route-policy]ospf 1
</span></span><span class="line"><span class="cl">[R-ospf-1]import-route direct route-policy rp1 
</span></span><span class="line"><span class="cl">#  OSPF 设置接口参数
</span></span><span class="line"><span class="cl">[R]int g0/0/0
</span></span><span class="line"><span class="cl">[R-g0/0/0]ospf authentication-mode md5 1 huawei //配置 OSPF 接口认证
</span></span><span class="line"><span class="cl">[R-g0/0/0]ospf cost 20000 //配置 OSPF 接口开销
</span></span></code></pre></div><h3 id="bgp">BGP</h3>
<p>（1）BGP 基本配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]bgp 100
</span></span><span class="line"><span class="cl"># 修改 bgp 优先级，三个参数依次为 ebgp 外部路由协议优先级，ibgp 内部路由协议优先级
</span></span><span class="line"><span class="cl">以及 bgp 本地路由协议优先级——本地路由是指通过聚合命令（summary automatic 自动聚合
</span></span><span class="line"><span class="cl">和 aggregate 手动聚合）所聚合的路由
</span></span><span class="line"><span class="cl">[R-bgp]perference 10 100 255 // 此参数建议谨慎修改，会影响全局路由
</span></span><span class="line"><span class="cl">[R-bgp]undo synchronization // 关闭 bgp 同步
</span></span><span class="line"><span class="cl">[R-bgp]undo summary automatic // 关闭自动归纳功能（默认关闭）
</span></span><span class="line"><span class="cl">[R-bgp]router-id  6.0.0.11
</span></span><span class="line"><span class="cl">[R-bgp]compare-different-as-med // 只有在比较不同 AS 邻居路由器的 MED 属性时才
</span></span><span class="line"><span class="cl">开启
</span></span><span class="line"><span class="cl">[R-bgp]peer 1.1.1.5 as-number 1 // 指向 EBGP 邻居
</span></span><span class="line"><span class="cl">[R-bgp]peer 1.1.1.5 password cipher huawei@123 // 邻居认证
</span></span><span class="line"><span class="cl">[R-bgp]peer 5.192.0.12 as-number 11 // 指向 IBGP 邻居
</span></span><span class="line"><span class="cl">[R-bgp]peer 5.192.0.12 connect-interface loopback 0 // 指定用环回口建立 
</span></span><span class="line"><span class="cl">IBGP 邻居
</span></span><span class="line"><span class="cl">[R-bgp]peer 5.192.0.12 next-hop-local // 更改 IBGP 邻居获得的路由下一跳指向
</span></span><span class="line"><span class="cl">自己
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>R<span class="p">&gt;</span>reset bgp all // 重启 bgp 进程
</span></span></code></pre></div><p>（2）BGP 业务路由引入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]bgp 100
</span></span><span class="line"><span class="cl">[R-bgp]network 10.1.4.4 24
</span></span><span class="line"><span class="cl"># network 发布的路由，需要在路由表中有一条完全匹配的路由，否则无法发布，若无匹配路由，
</span></span><span class="line"><span class="cl">则需手动配置一条静态路由指向 null 0，如
</span></span><span class="line"><span class="cl">[R-bgp]network 6.0.0.0 8 
</span></span><span class="line"><span class="cl">[R-bgp]ip route-static 6.0.0.0 255.0.0.0 null 0
</span></span></code></pre></div><h3 id="vpnmpls-vpn">VPN(MPLS VPN)</h3>
<p>（1） MPLS 基本配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]mpls lsr-id loopback 0
</span></span><span class="line"><span class="cl">[R]mpls
</span></span><span class="line"><span class="cl">[R-mpls]mpls ldp
</span></span><span class="line"><span class="cl">[R-mpls-ldp]int pos 1/0/1
</span></span><span class="line"><span class="cl">[R-pos1/0/1]mpls
</span></span><span class="line"><span class="cl">[R-pos1/0/1]mpls ldp
</span></span><span class="line"><span class="cl">[R-pos1/0/1]mtu 1500 // 可选配
</span></span><span class="line"><span class="cl">[R-pos1/0/1]mpls mtu 1520 // 可选配
</span></span></code></pre></div><p>（2）创建 VPN 实例并与接口进行绑定</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]ip vpn-instance vpna
</span></span><span class="line"><span class="cl">[R-vpn-instance-vpna]ipv4-family
</span></span><span class="line"><span class="cl">[R-vpn-instance-vpna-af-ipv4]route-distinguisher 300:1
</span></span><span class="line"><span class="cl">[R-vpn-instance-vpna-af-ipv4]vpn-target 100:1
</span></span><span class="line"><span class="cl">[R]int g2/0/0
</span></span><span class="line"><span class="cl">[R-g2/0/0]ip binding vpn-instance vpna
</span></span><span class="line"><span class="cl">[R-g2/0/0]ip add 192.168.31.1 24
</span></span></code></pre></div><p>（3）配置路由协议实现 VPN 实例内路由互通</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># OSPF 协议
</span></span><span class="line"><span class="cl">[R]ospf 2 vpn-instance vpna
</span></span><span class="line"><span class="cl">[R-ospf-2]area 0
</span></span><span class="line"><span class="cl">[R-ospf-2-area-0.0.0.0]network 192.168.31.0 0.0.0.255
</span></span><span class="line"><span class="cl">[R-ospf-2-area-0.0.0.0]import-route bgp  //如果bgp路由太大，请使用路由策略过滤
</span></span><span class="line"><span class="cl">想要引入的路由
</span></span><span class="line"><span class="cl"># 静态路由协议
</span></span><span class="line"><span class="cl">[R]ip route-static vpn-instance vpna 172.16.6.0 24 
</span></span><span class="line"><span class="cl">192.168.52.5
</span></span></code></pre></div><p>（4）配置 MP-BGP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]bgp 100
</span></span><span class="line"><span class="cl">[R-bgp]ipv4-family vpnv4
</span></span><span class="line"><span class="cl">[R-bgp-af-vpnv4]peer 12.0.0.2 enable
</span></span><span class="line"><span class="cl">[R-bgp-af-vpnv4]peer 12.0.0.2 advertise-community
</span></span><span class="line"><span class="cl">[R-bgp-af-vpnv4]quit
</span></span><span class="line"><span class="cl">[R-bgp]ipv4-family vpn-instance vpna
</span></span><span class="line"><span class="cl">[R-bgp-vpna]network 172.16.5.0 24 //宣告路由，用 network 和 import-route 
</span></span><span class="line"><span class="cl">命令都可以
</span></span></code></pre></div><h3 id="组播">组播</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 全局开启组播
</span></span><span class="line"><span class="cl">[R]multicast routing-enable
</span></span><span class="line"><span class="cl"># 接口加入组播
</span></span><span class="line"><span class="cl">[R-g0/0/0]int loo0
</span></span><span class="line"><span class="cl">[R-lo0]pim sm
</span></span><span class="line"><span class="cl">[R]int g0/0/0
</span></span><span class="line"><span class="cl">[R-g0/0/0]pim sm
</span></span><span class="line"><span class="cl"># 下游有接收组播组成员的接口还需开启 igmp
</span></span><span class="line"><span class="cl">[R-g0/0/0]igmp enable
</span></span><span class="line"><span class="cl"># 配置 rp（静态 rp 需在每台启用组播的设备上配置，动态 rp 配置一次即可）
</span></span><span class="line"><span class="cl">[R]acl number 2000
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]rule permit source 225.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]rule permit source 226.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]rule permit source 227.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-basic-2000]rule deny source any
</span></span><span class="line"><span class="cl">[R]pim 
</span></span><span class="line"><span class="cl">[R]c-bsr lo0 priority 100// 动态 rp 需配置候选 bsr，优先级越大越优先，默认为0
</span></span><span class="line"><span class="cl"># 使用 group-policy <span class="p">&lt;</span>acl 编号 <span class="p">&gt;</span> 命令配置 RP 允许接受的组播地址范围
</span></span><span class="line"><span class="cl">[R]c-rp lo0 group-policy 2000 priority 100 // 动态 rp 需配置候选 rp，优先级
</span></span><span class="line"><span class="cl">越小越优先，默认为 0 
</span></span><span class="line"><span class="cl"># 在 AS 边界路由器上配置阻断 Bootstrap 报文传递到对端 AS 中
</span></span><span class="line"><span class="cl">[R]int g0/0/0
</span></span><span class="line"><span class="cl">[R-g0/0/0]pim bsr-boundary
</span></span><span class="line"><span class="cl"># 配置各 AS 域内 rp 之间的 msdp（组播源发现协议）互通
</span></span><span class="line"><span class="cl">[R]msdp
</span></span><span class="line"><span class="cl">[R-msdp]peer 12.0.0.2 connect-interface g0/0/0
</span></span><span class="line"><span class="cl"># 缺省情况下，RP 收到的所有 SA 消息都转发给 MSDP 邻居，但对于那些只用于本自治系统
</span></span><span class="line"><span class="cl">使用的组播地址信息，可以使用 SA 过滤器对发送给 MSDP 邻居的 SA 消息进行过滤
</span></span><span class="line"><span class="cl"># 假设 AS 内部的组播地址为 231.0.0.0-238.0.0.0，则需对这些组播地址进行限制，而对
</span></span><span class="line"><span class="cl">全网范围的组播地址则不加限制
</span></span><span class="line"><span class="cl">[R]acl number 3000
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 231.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 232.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 233.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 234.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 235.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 236.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 237.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule deny ip source any destination 238.0.0.0 0.255.255.255
</span></span><span class="line"><span class="cl">[R-acl-adv-3000]rule permit ip source any destination any
</span></span><span class="line"><span class="cl">[R]msdp
</span></span><span class="line"><span class="cl">[R-msdp]peer 12.0.0.2 sa-policy export acl 3000
</span></span></code></pre></div><h3 id="配置文件备份">配置文件备份</h3>
<p>（1）复制粘贴方式
（2）ftp 导出方式
（3）sftp 导出方式</p>
<h2 id="交换机">交换机</h2>
<h3 id="名称-1">名称</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 采用「X_Y_Z」的形式，交换机 X 为节点或指挥所名称简写，Y 为网络业务区名称简写，Z 为
</span></span><span class="line"><span class="cl">设备型号
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>S<span class="p">&gt;</span>sys
</span></span><span class="line"><span class="cl">[S]sys 401GC_CSFW_S5700 (401 工程传输服务区 S5700 交换机）
</span></span></code></pre></div><h3 id="接口-1">接口</h3>
<p>（1）Vlanif 接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[S]int vlanif 1
</span></span><span class="line"><span class="cl">[S-vlanif1]ip add 10.1.1.1 255.255.255.0
</span></span></code></pre></div><p>（2） Eth-trunk 接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[S]int eth-trunk 1
</span></span><span class="line"><span class="cl">[S-eth-trunk1]mode manual load-balance //默认即为手工负载分担模式，此条命令可以
</span></span><span class="line"><span class="cl">不配
</span></span><span class="line"><span class="cl">[S-eth-trunk1]trunkport g 0/0/1 to 0/0/3 //加入成员接口
</span></span><span class="line"><span class="cl">[S-eth-trunk1]quit
</span></span><span class="line"><span class="cl"># 或者在接口视图下加入 eth-trunk
</span></span><span class="line"><span class="cl">[S]interface g0/0/1
</span></span><span class="line"><span class="cl">[S-g0/0/1]eth-trunk 1
</span></span></code></pre></div><h3 id="认证-1">认证</h3>
<p>参考路由器配置</p>
<h3 id="stp">STP</h3>
<p>（1）mstp</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[S]stp mode mstp
</span></span><span class="line"><span class="cl"># 生成树域配置
</span></span><span class="line"><span class="cl">[S]stp region-configuration
</span></span><span class="line"><span class="cl">[S-mst-region]region-name huawei
</span></span><span class="line"><span class="cl">[S-mst-region]revision-level 1
</span></span><span class="line"><span class="cl"># 配置实例绑定 vlan
</span></span><span class="line"><span class="cl">[S-mst-region]instance 1 vlan 10
</span></span><span class="line"><span class="cl">[S-mst-region]instance 2 vlan 20
</span></span><span class="line"><span class="cl">[S-mst-region]active region-configuration
</span></span><span class="line"><span class="cl"># 配置根桥和备份根桥
</span></span><span class="line"><span class="cl"># 方法一（推荐配置）
</span></span><span class="line"><span class="cl">[S]stp instance 1 root primary
</span></span><span class="line"><span class="cl">[S]stp instance 2 root secondary
</span></span><span class="line"><span class="cl"># 方法二
</span></span><span class="line"><span class="cl">[S]stp instance 1 priority 0
</span></span><span class="line"><span class="cl">[S]stp instance 2 priority 4096
</span></span></code></pre></div><p>⚠️ <strong>交换机配置路由协议互通的三层 vlanif 接口所属 vlan 下的二层接口请关闭 STP 功能，以免端口被阻塞影响路由协议邻居建立</strong> ⚠️</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[S]int g0/0/3
</span></span><span class="line"><span class="cl">[S-g0/0/3]undo stp enable <span class="p">|</span> stp disable //两条命令都可以，任选其一
</span></span></code></pre></div><h3 id="vlan">VLAN</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 创建 vlan
</span></span><span class="line"><span class="cl">[S]vlan batch 100 200 1000
</span></span></code></pre></div><h3 id="trunk">TRUNK</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 配置 trunk 口
</span></span><span class="line"><span class="cl">[S]int g0/0/1
</span></span><span class="line"><span class="cl">[S-g0/0/1]port link-type trunk
</span></span><span class="line"><span class="cl">[S-g0/0/1]port trunk allow-pass vlan all
</span></span><span class="line"><span class="cl">[S-g0/0/1]int g0/0/2
</span></span><span class="line"><span class="cl">[S-g0/0/2]port link-type trunk
</span></span><span class="line"><span class="cl">[S-g0/0/2]port trunk allow-pass vlan all
</span></span><span class="line"><span class="cl"># 配置 access 口
</span></span><span class="line"><span class="cl">[S-g0/0/2]int g0/0/3
</span></span><span class="line"><span class="cl">[S-g0/0/3]port link-type access
</span></span><span class="line"><span class="cl">[S-g0/0/3]port default vlan 10
</span></span><span class="line"><span class="cl">[S-g0/0/3]int g0/0/4
</span></span><span class="line"><span class="cl">[S-g0/0/4]port link-type access
</span></span><span class="line"><span class="cl">[S-g0/0/4]port default vlan 20
</span></span></code></pre></div><h3 id="vrrp">VRRP</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 在 vlanif 接口下配置
</span></span><span class="line"><span class="cl">[S]int vlanif 10
</span></span><span class="line"><span class="cl">[S-vlanif10]vrrp vrid 1 virtual-ip 192.168.1 254
</span></span><span class="line"><span class="cl">[S-vlanif10]vrrp vrid 1 priority 120 //设置 vrrp 优先级（默认 100，越高越优先）
</span></span><span class="line"><span class="cl">[S-vlanif10]vrrp vrid 1 preempt-mode timer delay 20 // 主虚拟路由器设置抢占
</span></span><span class="line"><span class="cl">延时为 20s
</span></span></code></pre></div><h3 id="ospf-1">OSPF</h3>
<p>三层交换机参考路由器配置</p>
<h3 id="组播-1">组播</h3>
<p>（1）三层交换机参考路由器配置
（2）二层交换机需启用 igmp-snooping</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 全局启用 igmp-snooping
</span></span><span class="line"><span class="cl">[S]igmp-snooping enable
</span></span><span class="line"><span class="cl"># vlan 下启用 igmp-snooping
</span></span><span class="line"><span class="cl">[S]vlan 10
</span></span><span class="line"><span class="cl">[S-vlan10]igmp-snooping enable
</span></span><span class="line"><span class="cl">[S-vlan10]vlan 20
</span></span><span class="line"><span class="cl">[S-vlan20]igmp-snooping enable
</span></span></code></pre></div><h3 id="配置文件备份-1">配置文件备份</h3>
<p>参考路由器配置</p>
<h2 id="访问控制">访问控制</h2>
<h3 id="vlan-的隔离">VLAN 的隔离</h3>
<p>（1）端口隔离</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 配置接口 g1/0/1 和 g1/0/2 的端口隔离功能，实现两个接口之间的二层数据隔离，
</span></span><span class="line"><span class="cl">三层数据互通
</span></span><span class="line"><span class="cl">[S]port-isolate mode l2
</span></span><span class="line"><span class="cl">[S]int g1/0/1
</span></span><span class="line"><span class="cl">[S-g1/0/1]port-isolate enable group 1
</span></span><span class="line"><span class="cl">[S-g1/0/1]int g1/0/2
</span></span><span class="line"><span class="cl">[S-g1/0/2]port-isolate enable group 1
</span></span></code></pre></div><p>（2）Mux VLAN</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 创建 vlan
</span></span><span class="line"><span class="cl">[S]vlan batch 2 3 4
</span></span><span class="line"><span class="cl">[S]vlan 2
</span></span><span class="line"><span class="cl"># 配置该 vlan 为 mux vlan，即 principal vlan
</span></span><span class="line"><span class="cl">[S-vlan2]mux-vlan
</span></span><span class="line"><span class="cl"># 互通型 vlan
</span></span><span class="line"><span class="cl">[S-vlan2]subordinate group 3
</span></span><span class="line"><span class="cl"># 隔离型 vlan
</span></span><span class="line"><span class="cl">[S-vlan2]subordinate separate 4
</span></span><span class="line"><span class="cl"># 使能接口的 mux vlan 功能
</span></span><span class="line"><span class="cl">[S]int g0/0/1
</span></span><span class="line"><span class="cl">[S-g0/0/1]port link-type access
</span></span><span class="line"><span class="cl">[S-g0/0/1]port default vlan 3
</span></span><span class="line"><span class="cl">[S-g0/0/1]port mux-vlan enable vlan 3
</span></span></code></pre></div><h3 id="acl-访问控制">ACL 访问控制</h3>
<p><strong>做流量过滤时，基本 ACL 离目的近，高级 ACL 离源进</strong>
（1）traffice-filter 做流量过滤</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># VLAN 下做 traffic-filter
</span></span><span class="line"><span class="cl">[S]acl 3000
</span></span><span class="line"><span class="cl">[S-acl-adv-3000]rule permit tcp destination 192.168.2.1 0 
</span></span><span class="line"><span class="cl">destination-port eq 21
</span></span><span class="line"><span class="cl">[S-acl-adv-3000]rule deny ip destination 192.168.2.0 
</span></span><span class="line"><span class="cl">0.0.0.255
</span></span><span class="line"><span class="cl">[S-acl-adv-3000]quit
</span></span><span class="line"><span class="cl">[S]traffic-filter vlan 10 inbound acl 3000
</span></span><span class="line"><span class="cl"># 接口视图下做 traffic-filter
</span></span><span class="line"><span class="cl">[S]acl 3001
</span></span><span class="line"><span class="cl">[S-acl-adv-3001]rule deny tcp source 192.168.1.1 0 
</span></span><span class="line"><span class="cl">destination 192.168.3.1 0 destination-port eq 21
</span></span><span class="line"><span class="cl">[S-acl-adv-30001]quit
</span></span><span class="line"><span class="cl">[S]int g0/0/3
</span></span><span class="line"><span class="cl">[S-g0/0/3]traffic-filter inbound acl 3001
</span></span></code></pre></div><p>（2）traffic-policy 流策略做流量过滤（作为没有 traffic-filter 命令的备份）
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_%E9%80%9A%E8%BF%87%E6%B5%81%E7%AD%96%E7%95%A5%E5%AE%9E%E7%8E%B0VLAN%E4%B8%89%E5%B1%82%E9%9A%94%E7%A6%BB.png" alt="通过流策略实现VLAN三层隔离"></p>
<h2 id="接入控制">接入控制</h2>
<h3 id="交换机上-ipmac端口绑定">交换机上 IP、MAC、端口绑定</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 首先查看终端 mac 地址并复制
</span></span><span class="line"><span class="cl">[S]dis mac-address
</span></span><span class="line"><span class="cl"># 然后配置绑定
</span></span><span class="line"><span class="cl">[S] user-bind static ip-address 192.168.100.1 mac-address 5489-9885-723a 
</span></span><span class="line"><span class="cl">interface g0/0/1 
</span></span><span class="line"><span class="cl"># 最后在端口激活检查
</span></span><span class="line"><span class="cl">[s]int g0/0/1
</span></span><span class="line"><span class="cl">[S-g0/0/1]ip source check user-bind enable
</span></span></code></pre></div><h2 id="流量采集">流量采集</h2>
<h3 id="交换机镜像-wireshark-采集">交换机镜像 Wireshark 采集</h3>
<p>（1）本地镜像配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 配置观察口
</span></span><span class="line"><span class="cl">[S]observe-port 1 int g0/0/24
</span></span><span class="line"><span class="cl"># 配置一个镜像口
</span></span><span class="line"><span class="cl">[S]interface g0/0/1
</span></span><span class="line"><span class="cl">[S-g0/0/1]port-mirroring to observe-port 1 [inbound（入向）<span class="p">|</span> outbound（出向）
</span></span><span class="line"><span class="cl"><span class="p">|</span> both（双向）]
</span></span><span class="line"><span class="cl"># 配置多个镜像口
</span></span><span class="line"><span class="cl">[S]interface range g0/0/1 to 0/0/23
</span></span><span class="line"><span class="cl">[S-range0/0/1-0/0/23]port-mirroring to observe-port 1 [inbound <span class="p">|</span> outbound 
</span></span><span class="line"><span class="cl"><span class="p">|</span> both]
</span></span></code></pre></div><p>（2） Wireshark 采集
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_Wireshark%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="Wireshark显示过滤器表达式"></p>
<h2 id="维护与排障">维护与排障</h2>
<ul>
<li>配置之前先检查设备各硬件及板卡指示灯是否正常，有无告警；再确认路由器主管理板是哪块，防止插错管理口；线缆连接完毕后请检查相应端口指示灯是否点亮。</li>
<li>NE20 系列路由器在用户视图下键入 sys 命令进入系统视图后，配置命令并不立即生效，如需生效需键入 commit 命令；如要在用户视图下进入系统配置立即生效模式，请键入 <code>system-view immediately</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>R<span class="p">&gt;</span>sys 
</span></span><span class="line"><span class="cl">[~R]sysna huawei //此条命令并不立即生效
</span></span><span class="line"><span class="cl">[~R]commit //执行 commit 才会生效
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>R<span class="p">&gt;</span>sys im //进入立即生效模式
</span></span><span class="line"><span class="cl">[R]sysna huawei //命令在键入后即生效
</span></span></code></pre></div><ol>
<li>
<p>配置信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis cur con [aaa <span class="p">|</span> bgp <span class="p">|</span> ...] //某项配置信息查看
</span></span><span class="line"><span class="cl">[R]dis cur <span class="p">|</span> include <span class="p">&lt;</span>关键字<span class="p">&gt;</span> //按关键字查看配置信息
</span></span></code></pre></div></li>
<li>
<p>接口信息查看</p>
<p>（1）接口状态概要信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis interface brief
</span></span></code></pre></div><p>（2）三层接口概要信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis ip interface brief
</span></span></code></pre></div><p>（3）二层接口所属 VLAN 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis port vlan
</span></span></code></pre></div><p>（4）E1-F 接口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]display fe1 serial 2/0/0 //查看 E1-F 接口的基本配置信息和告警情况
</span></span><span class="line"><span class="cl">[R]dis interface serial 2/0/0 //查看 E1-F 接口的状态及统计信息
</span></span><span class="line"><span class="cl"># 配置环回检测功能
</span></span><span class="line"><span class="cl">[R]int serial 2/0/0
</span></span><span class="line"><span class="cl">[R-serial2/0/0]fe1 loopback [local <span class="p">|</span> payload <span class="p">|</span> remote] //配置检测方式为本端、
</span></span><span class="line"><span class="cl">载荷和远端
</span></span><span class="line"><span class="cl">[R]display interface serial 2/0/0 //查看本端/对端设备的 Serial 接口的物理状态
</span></span><span class="line"><span class="cl">（current state）是否为 UP
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>R<span class="p">&gt;</span>reset counters interface serial 2/0/0 //清除 E1-F 接口生成的串口上的统计
</span></span><span class="line"><span class="cl">信息
</span></span></code></pre></div><p>（5）<strong>Pos 接口物理层不 up</strong></p>
<ul>
<li>检查对接的两侧设备接口上的光纤模块是否匹配</li>
<li>检查故障端口做环回测试后是否 up</li>
<li>做该环回的目的是<code>检查本端单板是否正常</code>，如果 loopback local 后仍然无法 up，则可以确定是本端接收单板的故障导致，尝试更换子卡。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[HUAWEI-Pos0/1/0] loopback local
</span></span><span class="line"><span class="cl">[HUAWEI-Pos0/1/0] dlisplay this interface
</span></span><span class="line"><span class="cl">Pos0/1/0 current state: UP 备注：物理状态的显示结果
</span></span><span class="line"><span class="cl">Line protocol current state： DOWN
</span></span><span class="line"><span class="cl">Link quality grade:--
</span></span><span class="line"><span class="cl">Description:HUAWEI, Pos0/1/0 Interface
</span></span><span class="line"><span class="cl">Route Port, The Maximum Transmit Unit is 4470, Hold time
</span></span><span class="line"><span class="cl">Internet protocol processing: disabled
</span></span><span class="line"><span class="cl">Link layer protocol is PPP
</span></span><span class="line"><span class="cl">LCP initial
</span></span><span class="line"><span class="cl">The Vendor PN is FTLF8519P2BNL-HW
</span></span><span class="line"><span class="cl">The Vendor Name is FINISAR CORP.
</span></span><span class="line"><span class="cl">Port Bw: 2.5G, Transceiver max Bw:2.5G, Transceiver Mo
</span></span><span class="line"><span class="cl">WaveLength: 850nm, Transmission Distance: 500m
</span></span><span class="line"><span class="cl">Physical layer is Packet Over SDH
</span></span><span class="line"><span class="cl">Scramble enabled, clock master, CRC-32, loopback: local
</span></span><span class="line"><span class="cl">Flag J0 <span class="s2">&#34;NetEngine  &#34;</span>
</span></span><span class="line"><span class="cl">Flag J1 <span class="s2">&#34;NetEngine  &#34;</span> 
</span></span><span class="line"><span class="cl">Flag C2 22(0x16)
</span></span><span class="line"><span class="cl">Last physical up time: 2016-01-24 11:10:05
</span></span><span class="line"><span class="cl">Last physical down time: 2016-01-24 10:47:00
</span></span><span class="line"><span class="cl">Current System time: 2016-01-24 11:10:14
</span></span></code></pre></div><ul>
<li>
<p>检查接口上是否有联动 down 的告警</p>
<ul>
<li>
<p>检查接口上的 SDH 告警</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>HUAWEl<span class="p">&gt;</span> display pos interface pos0/1/0
</span></span><span class="line"><span class="cl">Pos0/1/0 current state:DOWN
</span></span><span class="line"><span class="cl">Line protocol current state:DOWN
</span></span><span class="line"><span class="cl">Physical layer is Packet Over SDH
</span></span><span class="line"><span class="cl">Scramble enabled, clock master, CRC-32, loopback: none
</span></span><span class="line"><span class="cl">Flag J0 <span class="s2">&#34;NetEngine&#34;</span>
</span></span><span class="line"><span class="cl">Flag J1 <span class="s2">&#34;NetEngine&#34;</span>
</span></span><span class="line"><span class="cl">Flag C2 22(0x16)
</span></span><span class="line"><span class="cl">SDH alarm: //备注：下面3行表示sdh告警，当前有LOS告警
</span></span><span class="line"><span class="cl">section layer: LOS
</span></span><span class="line"><span class="cl">line layer: none
</span></span><span class="line"><span class="cl"><span class="k">path</span> layer: none
</span></span><span class="line"><span class="cl">SDH error: //备注：下面3行表示sdh误码
</span></span><span class="line"><span class="cl">section layer: B1 0
</span></span><span class="line"><span class="cl">line layer: B2 0 REI 0
</span></span><span class="line"><span class="cl"><span class="k">path</span> layer: B3 0 REI 0
</span></span><span class="line"><span class="cl"># POS接口默认联动down的SDH告警是LOS/LOF/LAIS，很多设备还有再配置LRDI/PRDI联动down，
</span></span><span class="line"><span class="cl">可以通过查看接口上的配置确认。
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span>HUAWEI<span class="p">&gt;</span> display current-configuration interface pos0/1/1
</span></span><span class="line"><span class="cl">#
</span></span><span class="line"><span class="cl">interface Pos0/1/1
</span></span><span class="line"><span class="cl">link-protocol hdlc
</span></span><span class="line"><span class="cl">undo shutdown
</span></span><span class="line"><span class="cl">transmission-alarm down lais lof los lrdi pais prdi 
</span></span><span class="line"><span class="cl">#
</span></span><span class="line"><span class="cl">return
</span></span></code></pre></div></li>
<li>
<p>按照以上步骤中命令行回显的 SDH 告警，分别进行检查。
<strong>LOS告警可能的故障原因：</strong></p>
<ol>
<li>排查路由器至传输设备间的链路，可以用光功率计测量光功率，必要时可以进行更换或使用正常的链路进行交叉测试。</li>
<li>路由器与传输设备之间的尾纤错联，使不同速率级别的光口互连。</li>
<li>传输设备上游无光，且传输设备配置了激光器关断，导致未向路由器发光，需要检查传输设备。</li>
<li>可以排查一下传输设备上有无LOS，LOF等告警。</li>
</ol>
<p><strong>LOF告警可能的故障原因：</strong></p>
<ol>
<li>排查路由器至传输设备间的链路质量。</li>
<li>排查传输设备上的告警，传输网络中有线路故障或单板故障，导致传输波分设备与路由器连接的单板收上游无光或收上游有LOF告警，从而向下游的路由器设备发送带有LOF告警的信号。</li>
</ol>
<p><strong>LAIS/PAIS告警可能的故障原因：</strong></p>
<ol>
<li>路由器POS口因为LOS、OOF或LOF告警，而产生LAIS/PAIS，这种情况不用关注LAIS和PAIS告警。</li>
<li>单独的LAIS/PAIS告警，一般是传输设备发送过来的，需要排查传输设备。</li>
</ol>
<p><strong>LRDI/PRID告警可能的故障原因：</strong></p>
<ol>
<li>对端路由器连接传输设备的端口，上报了LOS、 LOF、或LAIS/PAIS告警，并且由传输设备发向路由器的单方向尾纤链路良好的情况下，回告给本端路由器POS口LRDI/PRID告警指示。也就是说这是一种远端设备故障指示的告警，需要检查对端路由器不up的原因。</li>
</ol>
</li>
</ul>
</li>
<li>
<p>在故障端口光模块上做尾纤自环测试后检查是否 up</p>
<ul>
<li>采取使用尾纤加固定光衰（保证输入光功率不超过POS口上限，光模块传输距离在10KM及以下的无需光衰）对POS口进行端口内环回操作。环回前，应先测量本POS端口的输出功率，选择合适的固定光衰。
环回后，先观察端口上的接收光功率是否在正常范围内，然后查看SDH告警是否消失，物理状态是否up。如果up，则说明是传输问题，如果不up，说明是本端故障，可以尝试更换光模块。
查询接口光模块传输距离，光功率及光功率门限的命令：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>HUAWEl<span class="p">&gt;</span> display interface Pos 0/1/0
</span></span><span class="line"><span class="cl">Pos0/1/0 current state: DOWN //备注：物理状态的显示    
</span></span><span class="line"><span class="cl">Line protocol current state : DOWN
</span></span><span class="line"><span class="cl">Link quality grade :--
</span></span><span class="line"><span class="cl">Description:HUAWEl, Pos0/1/0 Interface
</span></span><span class="line"><span class="cl">Route Port,The Maximum Transmit Unit is 4470, Hold time
</span></span><span class="line"><span class="cl">Internet protocol processing : disabled
</span></span><span class="line"><span class="cl">Link layer protocol is PPP
</span></span><span class="line"><span class="cl">LCP initial
</span></span><span class="line"><span class="cl">The Vendor PN is FTLF8519P2BNL-HW
</span></span><span class="line"><span class="cl">The Vendor Name is FINISAR CORP.
</span></span><span class="line"><span class="cl">Port BW: 2.5G, Transceiver max BW: 1G, Transceiver Moc
</span></span><span class="line"><span class="cl">WaveLength: 850nm, Transmission Distance: 500m 
</span></span><span class="line"><span class="cl">Rx Power: -29.59dBm, Warning range:[-16.99, 0.00ldBm
</span></span><span class="line"><span class="cl">Tx Power: -5.44dBm, Warning range: [-9.50, 0.00]dBm
</span></span><span class="line"><span class="cl">Physical layer is Packet Over SDH
</span></span><span class="line"><span class="cl"># 说明：
</span></span><span class="line"><span class="cl"># 前面那个Rx Power是当前的接收功率，后面那个中括号
</span></span><span class="line"><span class="cl"># 内的范围是正常的功率范围，在范围之外的都不正常。
</span></span><span class="line"><span class="cl"># TX Power是当前的发送光功率，后面括号中的范围是正
</span></span><span class="line"><span class="cl"># 常的发送光功率范围。
</span></span></code></pre></div></li>
<li>
<p>收集信息寻求技术支持</p>
</li>
</ul>
<p>（6）<strong>Pos 接口检查光模块工作状态是否正常</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>HUAWEI<span class="p">&gt;</span> display transceiver interface GigabitEthernet 2/0/3 verbose 
</span></span><span class="line"><span class="cl">GigabitEthernet2/0/3 transceiver information: 
</span></span><span class="line"><span class="cl">------------------------------------------------------------- 
</span></span><span class="line"><span class="cl">Common information: 
</span></span><span class="line"><span class="cl">Transceiver Type:1000_BASE_SX_SFP 
</span></span><span class="line"><span class="cl">Connector Type:LC 
</span></span><span class="line"><span class="cl">Wavelength(nm):850 
</span></span><span class="line"><span class="cl">Transfer Distance(m):500(50um),300(62.5um) 
</span></span><span class="line"><span class="cl">Digital Diagnostic Monitoring:YES 
</span></span><span class="line"><span class="cl">Vendor Name:HUAWEI 
</span></span><span class="line"><span class="cl">Vendor Part Number:02315204 
</span></span><span class="line"><span class="cl">Ordering Name: 
</span></span><span class="line"><span class="cl">------------------------------------------------------------- 
</span></span><span class="line"><span class="cl">Manufacture information: 
</span></span><span class="line"><span class="cl">Manu. Serial Number:NSK1NNV 
</span></span><span class="line"><span class="cl">Manufacturing Date:2014-11-09 
</span></span><span class="line"><span class="cl">Vendor Name:HUAWEI 
</span></span><span class="line"><span class="cl">------------------------------------------------------------- 
</span></span><span class="line"><span class="cl">Alarm information: 
</span></span><span class="line"><span class="cl">------------------------------------------------------------- 
</span></span><span class="line"><span class="cl">Diagnostic information:
</span></span><span class="line"><span class="cl">Temperature(°C):39
</span></span><span class="line"><span class="cl">Voltage(V):3.32
</span></span><span class="line"><span class="cl">Bias Current(mA):6.91 //电流值
</span></span><span class="line"><span class="cl">Bias High Threshold(mA):33.34
</span></span><span class="line"><span class="cl">Bias LowThreshold(mA):1.67
</span></span><span class="line"><span class="cl">Current Rx Power(dBM):-4.59 //接口收光功率
</span></span><span class="line"><span class="cl">Default Rx Power High Threshold(dBM):0.00
</span></span><span class="line"><span class="cl">Default Rx Power LowThreshold(dBM):-16.99
</span></span><span class="line"><span class="cl">Current Tx Power(dBM):-5.10 //接口发光功率
</span></span><span class="line"><span class="cl">Default Tx Power High Threshold(dBM):0.00
</span></span><span class="line"><span class="cl">Default Tx Power LowThreshold(dBM):-12.50
</span></span><span class="line"><span class="cl">User Set Rx Power High Threshold(dBM) :0.00
</span></span><span class="line"><span class="cl">Jser Set Rx Power Low Threshold(dBM):-16.99
</span></span><span class="line"><span class="cl">User Set Tx Power High Threshold(dBM) :0.00
</span></span><span class="line"><span class="cl">User Set Tx Power Low Threshold(dBM):-12.50
</span></span></code></pre></div><p>（7）<strong>网口检查对接网线是否正常</strong></p>
<ul>
<li>对于 GE 电口，如果使用低于五类线的网线将不能够使 GE 电口以 1000M 速率 Up，所有电口对接，均推荐使用五类线以上规格的网线对接</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>HUAWEI<span class="p">&gt;</span> system-view
</span></span><span class="line"><span class="cl">[HUAWEll interface gigabitethernet 0/0/1
</span></span><span class="line"><span class="cl">[HUAWEI-GigabitEthernet0/0/1] virtual-cable-test
</span></span><span class="line"><span class="cl">Pair A length: 1meter(s)
</span></span><span class="line"><span class="cl">Pair B Iength: 1meter(s)
</span></span><span class="line"><span class="cl">Pair C length: 1meter(s)
</span></span><span class="line"><span class="cl">Pair D length: 1meter(s)
</span></span><span class="line"><span class="cl">Pair A state: Ok //回显中“Pair state”为“OK”表示正常；如果为其他状态，建议更换网线测试
</span></span><span class="line"><span class="cl">Pair B state: Ok
</span></span><span class="line"><span class="cl">Pair C state: Ok
</span></span><span class="line"><span class="cl">Pair D state: Ok
</span></span></code></pre></div></li>
<li>
<p>VLAN 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis vlan summary
</span></span></code></pre></div></li>
<li>
<p>STP 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis stp region-configuration //生成树域查看
</span></span><span class="line"><span class="cl">[R]dis stp instance 1//生成树信息查看
</span></span><span class="line"><span class="cl">[R]dis stp instance 1 brief //生成树概要信息查看
</span></span></code></pre></div></li>
<li>
<p>VRRP 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis vrrp brief
</span></span></code></pre></div></li>
<li>
<p>OSPF 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis ospf interface
</span></span><span class="line"><span class="cl">[R]dis ospf peer bri
</span></span><span class="line"><span class="cl">[R]dis ospf lsdb [router <span class="p">|</span> network <span class="p">|</span> summary <span class="p">|</span> asbr <span class="p">|</span> ase <span class="p">|</span> nssa] //查看
</span></span><span class="line"><span class="cl">相应类型的 LSA 的详细信息
</span></span><span class="line"><span class="cl">[R]dis ospf routing-table 
</span></span></code></pre></div></li>
<li>
<p>BGP 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">[R]dis bgp peer
</span></span><span class="line"><span class="cl">[R]dis bgp routing-table
</span></span></code></pre></div></li>
<li>
<p>组播信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 三层设备
</span></span><span class="line"><span class="cl">[R]dis multicast routing-table
</span></span><span class="line"><span class="cl">[R]dis pim routing-table
</span></span><span class="line"><span class="cl">[R]dis pim interface
</span></span><span class="line"><span class="cl">[R]dis pim neighbor
</span></span><span class="line"><span class="cl">[R]dis pim bsr-info
</span></span><span class="line"><span class="cl">[R]dis pim rp-info <span class="p">&lt;</span> 组播地址 &gt;
</span></span><span class="line"><span class="cl">[R]dis igmp group
</span></span><span class="line"><span class="cl">[R]dis igmp interface
</span></span><span class="line"><span class="cl"># 二层设备
</span></span><span class="line"><span class="cl">[S]dis igmp-snooping router-port vlan <span class="p">&lt;</span>vlan-id&gt;
</span></span><span class="line"><span class="cl">[S]dis igmp-snooping port-info vlan <span class="p">&lt;</span>vlan-id&gt;
</span></span><span class="line"><span class="cl">[S]dis l2-multicast forwarding-table vlan <span class="p">&lt;</span>vlan-id&gt;
</span></span></code></pre></div></li>
<li>
<p>VPN 信息查看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"># 查看 LDP 会话建立情况
</span></span><span class="line"><span class="cl">[R]dis mpls ldp session
</span></span><span class="line"><span class="cl">[R]dis mpls lsp
</span></span><span class="line"><span class="cl"># 查看本地 VPN 实例路由
</span></span><span class="line"><span class="cl">[R]dis ip routing-table vpn-instance vpna
</span></span><span class="line"><span class="cl"># 查看 MP-BGP 路由
</span></span><span class="line"><span class="cl">[R]dis bgp vpnv4 vpn-instance vpna routing-table
</span></span></code></pre></div></li>
</ol>
<h2 id="附录">附录</h2>
<ol>
<li>
<p>华为路由协议优先级
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_16291859715076.png" alt="huawei 路由协议的优先级"></p>
</li>
<li>
<p>理解华为 BGP 路由表
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_%E7%90%86%E8%A7%A3BGP%E8%B7%AF%E7%94%B1%E8%A1%A8.png" alt="理解BGP路由表"></p>
</li>
<li>
<p>BGP 路由协议 13 条选路原则
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_BGP13%E6%9D%A1%E9%80%89%E8%B7%AF%E5%8E%9F%E5%88%99.png" alt="BGP13条选路原则"></p>
</li>
<li>
<p>IP 协议号列表
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_IP%E5%8D%8F%E8%AE%AE%E5%8F%B7%E5%88%97%E8%A1%A8.png" alt="IP协议号列表"></p>
</li>
<li>
<p>TCP/UDP 端口列表
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_TCPUDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A80-1023.png" alt="TCPUDP端口列表0-1023"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_TCPUDP%E7%AB%AF%E5%8F%A31024-65535.png" alt="TCPUDP端口1024-65535"></p>
</li>
<li>
<p>Windows.MSC命令
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_08_29_Windows_msc%E5%91%BD%E4%BB%A4.png" alt="Windows_msc命令"></p>
</li>
<li>
<p>Windows7 防火墙设置
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_29_windows7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE%E7%AE%80%E4%BB%8B.png" alt="Windows7 防火墙设置简介">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_29_windows7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89.png" alt="Windows7 防火墙设置详解（一）">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_29_windows7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89.png" alt="Windows7 防火墙设置详解（二）"></p>
</li>
</ol>
]]></content:encoded></item><item><title>Git学习笔记</title><link>https://alphapenng.github.io/zh-cn/2022/08/03/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 03 Aug 2022 09:56:33 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/08/03/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>Git 基本原理介绍 参考来自 Git 基本原理介绍 | Escape 学习 笔记 参考来自 我的 Git 学习笔记 | Escape 编号 专用名词 对应解释 相关命令 1 Workspace 工作区 add 2 Index/Stage 暂存区 commit 3 Repository 本地仓库 p</description><content:encoded><![CDATA[<h2 id="git-基本原理介绍">Git 基本原理介绍</h2>
<blockquote>
<p>参考来自 <a href="https://www.escapelife.site/posts/da89563c.html">Git 基本原理介绍 | Escape</a></p>
</blockquote>
<h2 id="学习-笔记">学习 笔记</h2>
<blockquote>
<p>参考来自 <a href="https://www.escapelife.site/posts/8f4661c4.html">我的 Git 学习笔记 | Escape</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>编号</th>
<th>专用名词</th>
<th style="text-align:left">对应解释</th>
<th style="text-align:left">相关命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Workspace</td>
<td style="text-align:left">工作区</td>
<td style="text-align:left">add</td>
</tr>
<tr>
<td>2</td>
<td>Index/Stage</td>
<td style="text-align:left">暂存区</td>
<td style="text-align:left">commit</td>
</tr>
<tr>
<td>3</td>
<td>Repository</td>
<td style="text-align:left">本地仓库</td>
<td style="text-align:left">push、checkout</td>
</tr>
<tr>
<td>4</td>
<td>Remote</td>
<td style="text-align:left">远程仓库</td>
<td style="text-align:left">fetch、clone、pull</td>
</tr>
</tbody>
</table>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_12_%E6%88%91%E7%9A%84Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01.png" alt="文件的生命周期状态"></p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_12_%E6%88%91%E7%9A%84Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02.png" alt="文件的生命周期状态"></p>
<ol>
<li>Git 增删改查</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">cd</span> learngit
</span></span><span class="line"><span class="cl">$ git init  <span class="c1"># 初始化Git仓库</span>
</span></span><span class="line"><span class="cl">** create readme.txt
</span></span><span class="line"><span class="cl">** <span class="nb">echo</span> <span class="s2">&#34;line 1 &#34;</span>&gt;&gt; readme.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git add readme.txt            <span class="c1"># 添加到暂存空间</span>
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;first commit&#34;</span>  <span class="c1"># 提交加备注信息</span>
</span></span><span class="line"><span class="cl">** <span class="nb">echo</span> <span class="s2">&#34;error line 2&#34;</span> &gt;&gt; readme.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git add readme.txt
</span></span><span class="line"><span class="cl">$ git status  <span class="c1"># 查看状态</span>
</span></span><span class="line"><span class="cl">** have a change.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git reset HEAD readme.txt  <span class="c1"># 将暂存空间内容撤销</span>
</span></span><span class="line"><span class="cl">$ git checkout readme.txt    <span class="c1"># 撤销工作空间内容</span>
</span></span><span class="line"><span class="cl">** <span class="nb">echo</span> <span class="s2">&#34;line2&#34;</span> &gt;&gt; readme.txt
</span></span><span class="line"><span class="cl">$ git add readme.txt
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;commit line 2 &#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git reset --hard HEAD^    <span class="c1"># 回退为上个版本(删除修改)</span>
</span></span><span class="line"><span class="cl">$ git reset --hard <span class="o">(</span>gitID<span class="o">)</span>  <span class="c1"># 回退为指定版本(删除修改)</span>
</span></span><span class="line"><span class="cl">$ git reset --soft <span class="o">(</span>gitID<span class="o">)</span>  <span class="c1"># 回退为指定版本(不删除回退文件的修改)</span>
</span></span><span class="line"><span class="cl">$ git log                   <span class="c1"># 查看当前版本及之前版本的id号</span>
</span></span></code></pre></div><blockquote>
<p>参考来自 <a href="https://oschina.gitee.io/learn-git-branching/">learn-git-branching</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Git 仓库创建</span>
</span></span><span class="line"><span class="cl">$ git init                 <span class="c1"># 将当前目录设为Git代码库</span>
</span></span><span class="line"><span class="cl">$ git init <span class="o">[</span>project-name<span class="o">]</span>  <span class="c1"># 新建并将其设为Git代码库</span>
</span></span><span class="line"><span class="cl">$ git clone <span class="o">[</span>url<span class="o">]</span>          <span class="c1"># 通过连接下载一个已有项目</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git增加文件</span>
</span></span><span class="line"><span class="cl">$ git add <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span>  <span class="c1"># 添加指定文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add <span class="o">[</span>dir<span class="o">]</span>            <span class="c1"># 添加指定目录到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add .                <span class="c1"># 添加当前所有文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add -p               <span class="c1"># 添加每个变化前都要求确认</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git删除文件</span>
</span></span><span class="line"><span class="cl">$ git rm <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span>  <span class="c1"># 删除工作区文件并且将这次删除放入暂存区</span>
</span></span><span class="line"><span class="cl">$ git rm --cached <span class="o">[</span>file<span class="o">]</span>  <span class="c1"># 停止追踪指定文件但该文件会保留在工作区</span>
</span></span><span class="line"><span class="cl">$ git mv <span class="o">[</span>file-original<span class="o">]</span> <span class="o">[</span>file-renamed<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git代码提交</span>
</span></span><span class="line"><span class="cl">$ git commit -m <span class="o">[</span>message<span class="o">]</span>             <span class="c1"># 提交暂存区到仓库区</span>
</span></span><span class="line"><span class="cl">$ git commit -a                       <span class="c1"># 提交工作区自上次commit之后的变化直接到仓库区</span>
</span></span><span class="line"><span class="cl">$ git commit -v                       <span class="c1"># 提交时显示所有diff信息</span>
</span></span><span class="line"><span class="cl">$ git commit --amend -m <span class="o">[</span>message<span class="o">]</span>     <span class="c1"># 使用一次新的commit替代上一次提交</span>
</span></span><span class="line"><span class="cl">$ git commit --amend <span class="o">[</span>file1<span class="o">]</span> <span class="o">[</span>file2<span class="o">]</span>  <span class="c1"># 重做上一次commit并包括指定文件的新变化</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git撤销操作</span>
</span></span><span class="line"><span class="cl">$ git checkout .                <span class="c1"># 恢复暂存区的所有文件到工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>file<span class="o">]</span>           <span class="c1"># 恢复暂存区的指定文件到工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>commit<span class="o">]</span> <span class="o">[</span>file<span class="o">]</span>  <span class="c1"># 恢复某个commit的指定文件到暂存区和工作区</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git重置操作</span>
</span></span><span class="line"><span class="cl">$ git reset <span class="o">[</span>file<span class="o">]</span>           <span class="c1"># 重置暂存区的指定文件；与上一次commit保持一致但工作区不变</span>
</span></span><span class="line"><span class="cl">$ git reset --hard           <span class="c1"># 重置暂存区与工作区文件；与上一次commit保持一致；谨慎使用</span>
</span></span><span class="line"><span class="cl">$ git reset <span class="o">[</span>commit<span class="o">]</span>         <span class="c1"># 重置当前分支的指针为指定commit；同时重置暂存区但工作区不变</span>
</span></span><span class="line"><span class="cl">$ git reset --hard <span class="o">[</span>commit<span class="o">]</span>  <span class="c1"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区</span>
</span></span><span class="line"><span class="cl">$ git reset --keep <span class="o">[</span>commit<span class="o">]</span>  <span class="c1"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新建一个commit，用来撤销指定commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 后者的所有变化都将被前者抵消并且应用到当前分支</span>
</span></span><span class="line"><span class="cl">$ git revert <span class="o">[</span>commit<span class="o">]</span>
</span></span></code></pre></div><ol start="2">
<li>Git 远程仓库</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 注册github.com并创建本机的ssh-key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ssh-keygen -t rsa -C <span class="s2">&#34;123456789@qq.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加ssh-key到秘钥管理里面并关联远程仓库</span>
</span></span><span class="line"><span class="cl">$ git remote add origin git@github.com:xxx/learngit.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果远程仓库已经存在内容需要先pull下面，之后再提交</span>
</span></span><span class="line"><span class="cl">$ git pull origin master
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将本地库push到远程仓库，第一次需要加u关联，之后可以不加</span>
</span></span><span class="line"><span class="cl">$ git push -u origin master
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 仓库克隆</span>
</span></span><span class="line"><span class="cl">$ git clone git@github.com:xxx/gitkills.git
</span></span></code></pre></div><blockquote>
<p>参考来自 <a href="https://oschina.gitee.io/learn-git-branching/">learn-git-branching</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Git远程分支推送</span>
</span></span><span class="line"><span class="cl">$ git fetch <span class="o">[</span>remote<span class="o">]</span>          <span class="c1"># 下载远程仓库的所有变动</span>
</span></span><span class="line"><span class="cl">$ git pull <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>  <span class="c1"># 取回远程仓库的变化，并与本地分支合并</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>branch<span class="o">]</span>  <span class="c1"># 上传本地指定分支到远程仓库</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --force   <span class="c1"># 强行推送当前分支到远程仓库，即使有冲突</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --all     <span class="c1"># 推送所有分支到远程仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git远程同分支查看</span>
</span></span><span class="line"><span class="cl">$ git remote -v                     <span class="c1"># 显示所有远程仓库</span>
</span></span><span class="line"><span class="cl">$ git remote show <span class="o">[</span>remote<span class="o">]</span>          <span class="c1"># 显示某个远程仓库的信息</span>
</span></span><span class="line"><span class="cl">$ git remote add <span class="o">[</span>shortname<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span>  <span class="c1"># 增加一个新的远程仓库并命名</span>
</span></span></code></pre></div><ol start="3">
<li>Git 分支管理</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<ul>
<li>在工作区未提交的内容，所有分支都可以看到</li>
<li>提交之后的内容在对应的分支内，切换只能在对应的分支内看到</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看分支列表，其中*为当前分支</span>
</span></span><span class="line"><span class="cl">git branch
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建分支</span>
</span></span><span class="line"><span class="cl">git branch &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 切换分支</span>
</span></span><span class="line"><span class="cl">git checkout &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建并切换分支</span>
</span></span><span class="line"><span class="cl">git checkout -b &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 合并某分支到当前分支</span>
</span></span><span class="line"><span class="cl">git merge &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除分支</span>
</span></span><span class="line"><span class="cl">git branch -d &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 强行删除分支</span>
</span></span><span class="line"><span class="cl">git branch -D &lt;name&gt;
</span></span></code></pre></div><blockquote>
<p>参考来自 <a href="https://oschina.gitee.io/learn-git-branching/">learn-git-branching</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Git查看分支</span>
</span></span><span class="line"><span class="cl">$ git branch     <span class="c1"># 列出所有本地分支</span>
</span></span><span class="line"><span class="cl">$ git branch -r  <span class="c1"># 列出所有远程分支</span>
</span></span><span class="line"><span class="cl">$ git branch -a  <span class="c1"># 列出所有本地分支和远程分支</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git分支切换</span>
</span></span><span class="line"><span class="cl">$ git branch <span class="o">[</span>branch-name<span class="o">]</span>     <span class="c1"># 新建一个分支但停留在当前分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b <span class="o">[</span>branch<span class="o">]</span>     <span class="c1"># 新建一个分支并切换到该分支</span>
</span></span><span class="line"><span class="cl">$ git checkout <span class="o">[</span>branch-name<span class="o">]</span>   <span class="c1"># 切换到指定分支并更新工作区</span>
</span></span><span class="line"><span class="cl">$ git checkout -               <span class="c1"># 切换到上一个分支</span>
</span></span><span class="line"><span class="cl">$ git branch -d <span class="o">[</span>branch-name<span class="o">]</span>  <span class="c1"># 删除分支</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git分支删除</span>
</span></span><span class="line"><span class="cl">$ git push origin --delete <span class="o">[</span>branch-name<span class="o">]</span>  <span class="c1"># 删除远程分支</span>
</span></span><span class="line"><span class="cl">$ git branch -dr <span class="o">[</span>remote/branch<span class="o">]</span>          <span class="c1"># 删除远程分支</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 建立追踪关系，在现有分支与指定的远程分支之间</span>
</span></span><span class="line"><span class="cl">$ git branch --set-upstream <span class="o">[</span>branch<span class="o">]</span> <span class="o">[</span>remote-branch<span class="o">]</span>
</span></span></code></pre></div><ol start="4">
<li>Git 冲突处理</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<ul>
<li>合并时显示分支冲突先 <code>merge</code> 后修改 <code>&lt;&lt;&lt;&lt;分支1</code>、<code>&lt;&lt;&lt;分支2</code> 之间的冲突内容，然后再提交。当前分支会比被合并的分支，多一次 commit 的提交记录。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 合并指定分支到当前分支</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 禁用Fast forward功能，不删除分支且合并后保留分支</span>
</span></span><span class="line"><span class="cl">git merge --no-ff <span class="o">[</span>branch<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 选择一个commit并合并进当前分支</span>
</span></span><span class="line"><span class="cl">$ git cherry-pick <span class="o">[</span>commit<span class="o">]</span>
</span></span></code></pre></div><ol start="5">
<li>Git 比对日志</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看分支情况</span>
</span></span><span class="line"><span class="cl">git log --graph --pretty<span class="o">=</span>oneline --abbrev-commit
</span></span><span class="line"><span class="cl">git log --graph --decorate --pretty<span class="o">=</span>oneline --abbrev-commit --all
</span></span><span class="line"><span class="cl">git log --pretty<span class="o">=</span>fsormat:<span class="s1">&#39;%s %C(bold blue)(%an)%Creset&#39;</span> --abbrev-commit
</span></span><span class="line"><span class="cl">git log --graph --pretty<span class="o">=</span>format:<span class="s1">&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;</span> --abbrev-commit
</span></span></code></pre></div><blockquote>
<p>参考来自 <a href="https://oschina.gitee.io/learn-git-branching/">learn-git-branching</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Git日志格式</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git log                        <span class="c1"># 显示当前分支的版本历史</span>
</span></span><span class="line"><span class="cl">$ git log --stat                 <span class="c1"># 显示commit历史及每次commit变更的文件</span>
</span></span><span class="line"><span class="cl">$ git log -5 --pretty --oneline  <span class="c1"># 显示过去5次提交</span>
</span></span><span class="line"><span class="cl">$ git reflog                     <span class="c1"># 显示当前分支的最近几次提交</span>
</span></span><span class="line"><span class="cl">$ git shortlog -sn               <span class="c1"># 显示所有提交过的用户，按提交次数排序</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个commit之后的所有变动，每个commit占据一行</span>
</span></span><span class="line"><span class="cl">$ git log <span class="o">[</span>tag<span class="o">]</span> HEAD --pretty<span class="o">=</span>format:%s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个commit之后的所有变动，其&#34;提交说明&#34;必须符合搜索条件</span>
</span></span><span class="line"><span class="cl">$ git log <span class="o">[</span>tag<span class="o">]</span> HEAD --grep feature
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示某个文件的版本历史，包括文件改名</span>
</span></span><span class="line"><span class="cl">$ git log --follow <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">$ git whatchanged <span class="o">[</span>file<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git高级查询</span>
</span></span><span class="line"><span class="cl">$ git blame <span class="o">[</span>file<span class="o">]</span>                     <span class="c1"># 显示指定文件是什么人在什么时间修改过</span>
</span></span><span class="line"><span class="cl">$ git log -p <span class="o">[</span>file<span class="o">]</span>                    <span class="c1"># 显示指定文件相关的每一次diff</span>
</span></span><span class="line"><span class="cl">$ git log -S <span class="o">[</span>keyword<span class="o">]</span>                 <span class="c1"># 根据关键词搜索提交历史</span>
</span></span><span class="line"><span class="cl">$ git diff --shortstat <span class="s2">&#34;@{0 day ago}&#34;</span>  <span class="c1"># 显示今天你写了多少行代码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git 差异对比</span>
</span></span><span class="line"><span class="cl">$ git diff  <span class="c1"># 显示暂存区和工作区的差异</span>
</span></span><span class="line"><span class="cl">$ git diff --cached <span class="o">[</span>file<span class="o">]</span>  <span class="c1"># 显示暂存区和上一个commit的差异</span>
</span></span><span class="line"><span class="cl">$ git diff HEAD  <span class="c1"># 显示工作区与当前分支最新commit之间的差异</span>
</span></span><span class="line"><span class="cl">$ git diff <span class="o">[</span>first-branch<span class="o">]</span>...<span class="o">[</span>second-branch<span class="o">]</span>  <span class="c1"># 显示两次提交之间的差异</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Git显示内容</span>
</span></span><span class="line"><span class="cl">$ git show <span class="o">[</span>commit<span class="o">]</span>              <span class="c1"># 显示某次提交的元数据和内容变化</span>
</span></span><span class="line"><span class="cl">$ git show --name-only <span class="o">[</span>commit<span class="o">]</span>  <span class="c1"># 显示某次提交发生变化的文件</span>
</span></span><span class="line"><span class="cl">$ git show <span class="o">[</span>commit<span class="o">]</span>:<span class="o">[</span>filename<span class="o">]</span>   <span class="c1"># 显示某次提交时某个文件的内容</span>
</span></span></code></pre></div><ol start="6">
<li>Git 内容存储</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<ul>
<li>正在 dev 分支工作时，需要修改 bug 并提交。应该先把 dev 当前工作区 stash 储藏起来，修改完 bug 提交后在使用 git stash pop 恢复 dev 的内容到工作区。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 储藏当前工作区</span>
</span></span><span class="line"><span class="cl">git stash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看储藏区</span>
</span></span><span class="line"><span class="cl">git stash list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 恢复指定内容到工作区，不在stash内删除</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 其中的stashid可以通过git stash list查询</span>
</span></span><span class="line"><span class="cl">git stash apply &lt;stashid&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除储藏区</span>
</span></span><span class="line"><span class="cl">git stash drop &lt;stashid&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 恢复stash的内容到工作区，并在stash内删除</span>
</span></span><span class="line"><span class="cl">git stash pop
</span></span></code></pre></div><ol start="7">
<li>Git 标签管理</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<ul>
<li>标签基本都是发布版本的时候使用的，所以平常很少使用，了解即可。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新建标签，默认为在HEAD上，也可以指定一个commit id号</span>
</span></span><span class="line"><span class="cl">git tag &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 指定标签信息</span>
</span></span><span class="line"><span class="cl">git tag -a &lt;tagname&gt; -m <span class="s2">&#34;blablablabla&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用PGP签名标签</span>
</span></span><span class="line"><span class="cl">git tag -s &lt;tagname&gt; -m <span class="s2">&#34;blablablabla&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有标签</span>
</span></span><span class="line"><span class="cl">git tag
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看指定tag的详细内容</span>
</span></span><span class="line"><span class="cl">git show &lt;tagname&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除tag标签</span>
</span></span><span class="line"><span class="cl">git tag -d &lt;tagname&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送指定标签到远程</span>
</span></span><span class="line"><span class="cl">git push origin &lt;tagname&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送所有标签到远程</span>
</span></span><span class="line"><span class="cl">git push origin --tags
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从远程删除标签</span>
</span></span><span class="line"><span class="cl">git push origin :refs/tags/&lt;tagname&gt;
</span></span></code></pre></div><ol start="8">
<li>Git 配置管理</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<ul>
<li>主要配置日常使用工具和提交记录相关的配置，需要注意的是，区分全局和本地配置。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 列出配置项</span>
</span></span><span class="line"><span class="cl">$ git config --list
</span></span><span class="line"><span class="cl">$ git config --global --list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取配置项</span>
</span></span><span class="line"><span class="cl">$ git config user.name <span class="s2">&#34;escape&#34;</span>
</span></span><span class="line"><span class="cl">$ git config --global user.name <span class="s2">&#34;escape&#34;</span>
</span></span><span class="line"><span class="cl">$ git config user.email <span class="s2">&#34;escapelife@gmail.com&#34;</span>
</span></span><span class="line"><span class="cl">$ git config --global user.email <span class="s2">&#34;escapelife@gmail.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加配置项</span>
</span></span><span class="line"><span class="cl">$ git config -–add site.name yiibai
</span></span><span class="line"><span class="cl">$ git config --global -–add site.name yiibai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除配置项</span>
</span></span><span class="line"><span class="cl">$ git config -–unset site.name
</span></span><span class="line"><span class="cl">$ git config --global -–unset site.name
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取帮助</span>
</span></span><span class="line"><span class="cl">$ git <span class="nb">help</span> &lt;verb&gt;
</span></span><span class="line"><span class="cl">$ git <span class="nb">help</span> config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置全局默认编辑器</span>
</span></span><span class="line"><span class="cl">$ git config --global core.editor vim
</span></span><span class="line"><span class="cl">$ git config --global core.editor emacs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置比较工具</span>
</span></span><span class="line"><span class="cl">$ git config --global merge.tool vimdiff
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 全局代理配置</span>
</span></span><span class="line"><span class="cl">$ git config --global https.proxy http://127.0.0.1:1080
</span></span><span class="line"><span class="cl">$ git config --global https.proxy https://127.0.0.1:1080
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 全局取消代理配置</span>
</span></span><span class="line"><span class="cl">$ git config --global --unset http.proxy
</span></span><span class="line"><span class="cl">$ git config --global --unset https.proxy
</span></span></code></pre></div><ol start="9">
<li>Git  其他操作</li>
</ol>
<blockquote>
<p>参考来自 <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 生成发布压缩包</span>
</span></span><span class="line"><span class="cl">$ git archive
</span></span></code></pre></div><ol start="10">
<li>快捷键总结</li>
</ol>
<blockquote>
<p>OpenSource：总结的快捷键使用文档！</p>
</blockquote>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_09_12_GitCheatSheet.png" alt="Git Cheat Sheet"></p>
<h2 id="git-常用命令实战">Git 常用命令实战</h2>
<blockquote>
<p>参考来自 <a href="https://01.ftqq.com/2021/08/21/git-course/">Git 基础课</a></p>
</blockquote>
<ol>
<li><code>gitjk</code></li>
<li>使用 git 初始化命令
<code>git init</code></li>
<li>新建一个文件，把它添加到 git 里边
<code>echo &quot;make git great&quot; &gt; a.txt &amp;&amp; git add a.txt</code></li>
<li>将文件移除暂存区
<code>git reset HEAD -- a.txt</code></li>
<li>查看 git 仓库
<code>cd .git &amp;&amp; ls -la</code>
<code>cd objects &amp;&amp; ls -la</code></li>
<li>通过 git cat-file 命令查看文件内容
<code>git cat-file -p 61ac375fc5565c8a763d942dc599fd34128bdb37</code></li>
<li>查看 index 暂存区
<code>cd ../ &amp;&amp; git ls-files --stage</code></li>
<li>查看 HEAD 文件
<code>cat HEAD</code>
提示：引用文件不存在，因为还没有 commit</li>
<li>通过 commit 命令提交内容
<code>git commit -m 'first version'</code>
提示：回过头来看 HEAD 的引用</li>
<li>通过 git status 查看本地文件修改和暂存区的情况
<code>git status</code></li>
<li>修改 b.txt
<code>echo &quot;b&quot; &gt; b.txt</code></li>
<li>创建新分支
<code>git branch name</code></li>
<li>切换到某分支
<code>git checkout branch</code>
<code>git branch dev &amp;&amp; git checkout dev</code></li>
<li>编辑 a.txt 添加 make dev great again</li>
<li>将 a.txt 通过 add 加入暂存区，再通过 commit 放入仓库
<code>git add a.txt &amp;&amp; git commit -m 'dev'</code></li>
<li>checkout 回 master，再创建一个 ops 分支
<code>git checkout master &amp;&amp; git branch ops &amp;&amp; git checkout ops</code></li>
<li>编辑 a.txt，添加 make ops great again
<code>git add a.txt &amp;&amp; git commit -m 'ops'</code></li>
<li>开始合并分支 git merge</li>
<li>checkout 回 master，然后运行 merge 命令
<code>git checkout master &amp;&amp; git merge dev</code></li>
<li>带冲突的分支合并</li>
<li>checkout 回 dev
<code>git checkout dev</code></li>
<li>修改 a.txt
将 make dev great again 从第一行换到最后一行</li>
<li>提交修改
<code>git add a.txt &amp;&amp; git commit -m 'update a.txt'</code></li>
<li>再次合并
<code>git checkout master &amp;&amp; git merge dev &amp;&amp; git merge ops</code></li>
<li>合并失败后
<ul>
<li>放弃合并
<code>git merge --abort</code></li>
<li>手工合并冲突
打开 a.txt</li>
<li>再次提交
<code>git add a.txt &amp;&amp; git commit -m 'merged'</code></li>
</ul>
</li>
<li>通过 git log 查看日志
<code>git log</code></li>
<li>通过 checkout sha1，可以回到历史
<code>checkout -b 可以创建一个全新的分支</code></li>
<li>远程仓库
<ul>
<li>gitlab 创建仓库</li>
<li>git clone / git remote add</li>
<li>git push</li>
<li>再改用 github</li>
<li>git remote</li>
<li>git remote show <code>&lt;name&gt;</code></li>
<li>git remote remove <code>&lt;name&gt;</code></li>
<li>git remote add origin url</li>
<li>git push</li>
</ul>
</li>
<li>储藏区
<ul>
<li>往 a.txt 写入字符串
<code>echo &quot;Good&quot; &gt; a.txt &amp;&amp; git add a.txt &amp;&amp; git commit -m 'init2'</code>
<code>git stash</code>
<code>git stash apply</code>
<code>git stash list</code>
<code>git stash list</code>
<code>git stash show / drop / clear</code></li>
</ul>
</li>
</ol>
]]></content:encoded></item><item><title>Everything You Need to Know About Virtualization VMs Containers Pods Clusters</title><link>https://alphapenng.github.io/zh-cn/2022/08/02/everything-you-need-to-know-about-virtualization-vms-containers-pods-clusters/</link><pubDate>Tue, 02 Aug 2022 22:40:50 +0800</pubDate><guid>https://alphapenng.github.io/zh-cn/2022/08/02/everything-you-need-to-know-about-virtualization-vms-containers-pods-clusters/</guid><description>What is Virtualization? Virtualization is the act of dividing shared computational resources: CPU, RAM, Disk, and Networking into isolated resources that are unaware of the original shared scope. 虚拟化是将共享计算资源：CPU、RAM、磁盘和网络划分为不知道原始共享范围的孤立资源</description><content:encoded><![CDATA[<h2 id="what-is-virtualization">What is Virtualization?</h2>
<blockquote>
<p>Virtualization is the act of dividing shared computational resources: CPU, RAM, Disk, and Networking into isolated resources that are unaware of the original shared scope.</p>
</blockquote>
<p>虚拟化是将共享计算资源：CPU、RAM、磁盘和网络划分为不知道原始共享范围的孤立资源的行为。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_02_GqUqLA.jpg" alt="Virtualization"></p>
<h2 id="what-is-a-virtual-machine">What is a virtual machine?</h2>
<blockquote>
<p>A VM is a virtual env that functions as a virtual computer system with its own CPU, memory, nw  interface, &amp; storage, created on a physical hw system (located off- or on-prem).
It uses sw instead of a physical computer to run programs &amp; deploy apps.</p>
</blockquote>
<p>VM 是一个虚拟环境，它作为一个虚拟计算机系统运行，具有自己的 CPU、内存、nw 接口和存储，在物理硬件系统（位于外部或内部）上创建。
它使用 sw 而不是物理计算机来运行程序和部署应用程序。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_02_BLuYDw.jpg" alt="VM"></p>
<blockquote>
<p>The hypervisor allows multiple VMs to run on a single machine. Each VM includes a full copy of an operating system, the application, necessary binaries and libraries - taking up tens of GBs. VMs can also be slow to boot.</p>
</blockquote>
<p>管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含操作系统、应用程序、必要的二进制文件和库的完整副本 - 占用数十 GB。 VM 的启动速度也可能很慢。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_02_UUusKw.jpg" alt="Hypervisor"></p>
<h2 id="what-is-a-hypervisor">What is a hypervisor?</h2>
<blockquote>
<p>A hypervisor is software that creates &amp; runs virtual machines (VMs). A hypervisor, sometimes called a virtual machine monitor (VMM), isolates the hypervisor operating system &amp; resources from the virtual machines &amp; enables the creation &amp;  mgmt of those VMs.</p>
</blockquote>
<p>管理程序是创建和运行虚拟机 (VM) 的软件。管理程序，有时称为虚拟机监视器 (VMM)，将管理程序操作系统和资源与虚拟机隔离，并支持创建和管理这些 VM。</p>
<p><img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_02_sNIk27.jpg" alt="hypervisor"></p>
<h3 id="types-of-hypervisors">Types of hypervisors</h3>
<blockquote>
<p>There are 2 different types of hypervisors that can be used for virtualization.</p>
</blockquote>
<p>有两种不同类型的管理程序可用于虚拟化。</p>
<ol>
<li>
<p>Type 1 - A type 1 hypervisor is on bare metal. VM resources are scheduled directly to the hardware by the hypervisor. KVM is an example of a type 1 hypervisor.
类型 1 - 1 类虚拟机管理程序位于裸机上。 VM 资源由管理程序直接调度到硬件。 KVM 是类型 1 管理程序的一个示例。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_Xmnoy1.jpg" alt="Type 1 Hypervisor"></p>
</li>
<li>
<p>Type 2 - A type 2 hypervisor is hosted. VM resources are scheduled against a host operating system, which is then executed against the hardware. VMware Workstation and Oracle VirtualBox are examples of type 2 hypervisors.
类型 2 - 类型 2 管理程序是托管型。 VM 资源针对主机操作系统进行调度，然后针对硬件执行。 VMware Workstation 和 Oracle VirtualBox 是类型 2 管理程序的示例。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_ekF92P.jpg" alt="Type 2 Hypervisor"></p>
</li>
</ol>
<h2 id="what-are-containers">What are Containers?</h2>
<blockquote>
<p>A container is a pkg of sw that includes all dependencies: code, runtime, config, &amp; system libraries so that it can run on any host system.
At runtime, the container is also granted its own isolated slice of OS resources like CPU, RAM, Disk, &amp; Networking.</p>
</blockquote>
<p>容器是包含所有依赖项的 sw 包：代码、运行时、配置和系统库，以便它可以在任何主机系统上运行。
在运行时，容器还被授予自己独立的操作系统资源片，如 CPU、RAM、磁盘和网络。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_HPyYOB.jpg" alt="Application Container"></p>
<h2 id="why-do-you-need-containers">Why do you need Containers?</h2>
<blockquote>
<p>Containers are extremely useful in scaling DevOps efficiency across multiple codebases &amp; developer headcount. Containers ensures that containerized code works consistently on any machine the container is deployed to.</p>
</blockquote>
<p>容器在跨多个代码库和开发人员人数扩展 DevOps 效率方面非常有用。容器确保容器化代码在容器部署到的任何机器上一致地工作。</p>
<h2 id="how-does-a-container-work">How does a container work?</h2>
<blockquote>
<p>Containers virtualize a machines operating system at the user space level. Virtualizing user space leverages the existing mechanisms that divide system resources between separate user accounts and programs on an operating system.</p>
</blockquote>
<p>容器在用户空间级别虚拟化机器操作系统。虚拟化用户空间利用现有机制在操作系统上的单独用户帐户和程序之间划分系统资源。</p>
<blockquote>
<p>The Linux kernel has a few features that make this possible -&gt;
cgroups- It allow processes &amp; their resources to be grouped, isolated, &amp; managed as a unit.
Namespaces- limit what processes can see of the rest of the system.</p>
</blockquote>
<p>Linux 内核有一些特性使这成为可能 -&gt;
cgroups- 它允许将进程及其资源作为一个单元进行分组、隔离和管理。
命名空间 - 限制哪些进程可以看到系统的其余部分。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_0Lnd1f.jpg" alt="cgroups">
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_2MqImg.jpg" alt="namespaces"></p>
<h2 id="benefits-of-containers">Benefits of containers</h2>
<ol>
<li><strong>Less overhead</strong> - Containers require less system resources than traditional or hardware virtual machine environments because they don’t include operating system images.
<strong>更少的开销</strong> - 容器比传统或硬件虚拟机环境需要更少的系统资源，因为它们不包含操作系统映像。</li>
<li><strong>Increased portability</strong> - Applications running in containers can be deployed easily to multiple different operating systems and hardware platforms.
<strong>增加便携性</strong> - 在容器中运行的应用程序可以轻松部署到多个不同的操作系统和硬件平台。</li>
<li><strong>More consistent operation</strong> - DevOps teams know applications in containers will run the same, regardless of where they are deployed.
<strong>更一致的操作</strong> - DevOps 团队知道容器中的应用程序将运行相同，无论它们部署在哪里。</li>
<li><strong>Greater efficiency</strong> - Containers allow applications to be more rapidly deployed, patched, or scaled.
<strong>更高的效率</strong> - 容器允许更快速地部署、修补或扩展应用程序。</li>
<li><strong>Better application development</strong> - Containers support agile and DevOps efforts to accelerate development, test, and production cycles
<strong>更好的应用开发</strong> —— 容器支持敏捷和 DevOps 工作，以加快开发、测试和生产周期。</li>
</ol>
<h2 id="container-use-cases">Container use cases</h2>
<ol>
<li>
<p><strong>Application Modernization</strong></p>
<blockquote>
<p>Modernizing applications today means migrating programs from legacy on-premises deployments to cloud solutions. Bcoz containers are agile, they enhance an organization’s ability to migrate applications &amp; workflows seamlessly.</p>
</blockquote>
<p>今天的应用程序现代化意味着将程序从传统的本地部署迁移到云解决方案。 Bcoz 容器是敏捷的，它们增强了组织无缝迁移应用程序和工作流的能力。</p>
</li>
<li>
<p><strong>Refactor existing applications for containers</strong></p>
<blockquote>
<p>Although refactoring is much more intensive than lift-and-shift migration, it enables the full benefits of a container environment.</p>
</blockquote>
<p>尽管重构比直接迁移要密集得多，但它可以充分发挥容器环境的优势。</p>
</li>
<li>
<p><strong>Deploying Microservices</strong></p>
<blockquote>
<p>The microservices architecture allows sw developers to produce apps made up of several independent deployable services. Different components of d application hosted in containers are scalable &amp; amenable to updating w/o disrupting other services.</p>
</blockquote>
<p>微服务架构允许软件开发人员生成由几个独立的可部署服务组成的应用程序。托管在容器中的应用程序的不同组件是可扩展的，并且可以在不中断其他服务的情况下进行更新。</p>
</li>
<li>
<p><strong>Provide DevOps support for continuous integration and deployment (CI/CD)</strong></p>
<blockquote>
<p>Container technology supports streamlined build, test, and deployment from the same container images.</p>
</blockquote>
<p>容器技术支持从相同的容器映像简化构建、测试和部署。</p>
</li>
<li>
<p><strong>Provide easier deployment of repetitive jobs and tasks</strong></p>
<blockquote>
<p>Containers are being deployed to support one or more similar processes, which often run in the background, such as ETL functions or batch jobs.</p>
</blockquote>
<p>正在部署容器以支持一个或多个类似的流程，这些流程通常在后台运行，例如 ETL 功能或批处理作业。</p>
</li>
</ol>
<h2 id="containers-vs-vms">Containers vs VMs</h2>
<blockquote>
<p>VM’s simulate d entire machine &amp; OS. Means VMs have simulated CPU/RAM/Filesystems/nw resources.
Containers only virtualize d user space of an existing OS. Therefore containers r much more lightweight den VMs. Containers can be utilized in an existing host OS.</p>
</blockquote>
<p>VM 模拟整个机器和操作系统。意味着 VM 具有模拟的 CPU/RAM/ 文件系统 /nw 资源。
容器仅虚拟化现有操作系统的用户空间。因此，容器是更轻量级的虚拟机。容器可以在现有的主机操作系统中使用。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_lGsXiH.jpg" alt="Containers vs VMs"></p>
<h2 id="what-are-kubernetes-pods">What are (Kubernetes) Pods?</h2>
<blockquote>
<p>Pods are the smallest deployable units of computing that you can create &amp; manage in Kubernetes.
A Pod is a group of one or more containers, with shared storage &amp; nw  resources, &amp; a specification for how to run d  containers.</p>
</blockquote>
<p>Pod 是您可以在 Kubernetes 中创建和管理的最小的可部署计算单元。
Pod 是一组一个或多个容器，具有共享存储和网络资源，以及如何运行容器的规范。
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_xV5BPl.jpg" alt="Pods and Cluster"></p>
<h2 id="what-is-a-cluster">What is a cluster?</h2>
<blockquote>
<p>A cluster is a board that provides the circuitry to run all the pods (which have the container instances in them) in an orchestrated manner as defined by the users.
So there’s a symbiotic relationship between these terms:Container → Pod → Cluster</p>
</blockquote>
<p>集群是一块电路板，它提供了以用户定义的编排方式运行所有 pod（其中包含容器实例）的电路。
因此，这些术语之间存在共生关系：容器 → Pod → 集群
<img src="https://alphapenng-1305651397.cos.ap-shanghai.myqcloud.com/uPic/2021_11_11_pNpHed.jpg" alt="Container Pod Cluster"></p>
<ol>
<li>A container runs logically in a pod (though it also uses a container runtime).
容器在 pod 中逻辑运行（尽管它也使用容器运行时）。</li>
<li>A group of pods, related or unrelated, run on a cluster.
一组相关或不相关的 Pod 在集群上运行。</li>
<li>A cluster can contain many pods, related or unrelated [&amp;] grouped under d tight logical borders called namespaces.
一个集群可以包含许多 Pod，相关的或不相关的 [&amp;;] 在称为命名空间的紧密逻辑边界下分组。</li>
</ol>
]]></content:encoded></item></channel></rss>